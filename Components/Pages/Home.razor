@page "/"
@page "/login"
@layout Components.Layout.SimpleLayout
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@using HelpdeskBlazor.Services
@inject IAuthService AuthService
@inject ISessionService SessionService

<PageTitle>Helpdesk System</PageTitle>

<div class="login-page">
    <div class="login-container">
        <!-- Left Side - Branding -->
        <div class="login-left">
            <div class="login-left-content">
                <div class="logo">
                    <i class="fas fa-headset"></i>
                </div>
                <h2>Helpdesk System</h2>
                <p>Your comprehensive IT support solution for seamless business operations</p>

                <div class="features">
                    <div class="feature-item">
                        <i class="fas fa-ticket-alt"></i>
                        <span>Track and manage support tickets</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-clock"></i>
                        <span>Real-time status updates</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-users"></i>
                        <span>Collaborative team support</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-chart-line"></i>
                        <span>Comprehensive reporting</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Side - Login Form -->
        <div class="login-right">
            <div class="company-logo">
                @if (!string.IsNullOrEmpty(loginModel.Domain))
                {
                    @switch (loginModel.Domain.ToUpper())
                    {
                        case "SCPC":
                            <img src="scpc.png" alt="SCPC" class="domain-logo" />
                            break;
                        case "SMPC":
                            <img src="semirara.png" alt="Semirara Mining" class="domain-logo" />
                            break;
                        case "SLPGC":
                            <img src="slpgc.png" alt="SLPGC" class="domain-logo" />
                            break;
                    }
                }
                else
                {
                    <img src="semirara.png" alt="Semirara Mining" class="domain-logo default-logo" />
                }
            </div>

            <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm" class="login-form">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <div class="input-container">
                        <InputSelect @bind-Value="loginModel.Domain" class="form-control" id="domain">
                            <option value="">Select Domain</option>
                            <option value="SMPC">SMPC</option>
                            <option value="SCPC">SCPC</option>
                            <option value="SLPGC">SLPGC</option>
                        </InputSelect>
                        <i class="fas fa-building input-icon"></i>
                    </div>
                    <ValidationMessage For="@(() => loginModel.Domain)" />
                </div>

                <div class="form-group">
                    <label for="username">Username or Email</label>
                    <div class="input-container">
                        <InputText @bind-Value="loginModel.Username" class="form-control" id="username"
                            placeholder="Enter your username or email" />
                        <i class="fas fa-user input-icon"></i>
                    </div>
                    <ValidationMessage For="@(() => loginModel.Username)" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <div class="input-container">
                        <input type="@(showPassword ? "text" : "password")" @bind="loginModel.Password"
                            class="form-control" id="password" placeholder="Enter your password" />
                        <i class="fas fa-lock input-icon"></i>
                        <button type="button" class="password-toggle-btn" @onclick="TogglePassword"
                            style="position: absolute; right: 15px; top: 50%; transform: translateY(-50%); background: none; border: none; cursor: pointer; z-index: 999; color: #666; padding: 5px;">
                            <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <button type="submit" class="login-btn" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <div class="spinner"></div>
                        <span>Signing In...</span>
                    }
                    else
                    {
                        <span>Sign In</span>
                    }
                </button>
            </EditForm>
        </div>
    </div>
    <!-- Toast Container -->
    <div class="toast-container">
        @foreach (var toast in toasts)
        {
            <div class="toast @toast.Type @(toast.IsVisible ? "show" : "")">
                <div class="toast-icon">
                    @if (toast.Type == "success")
                    {
                        <i class="fas fa-check"></i>
                    }
                    else if (toast.Type == "error")
                    {
                        <i class="fas fa-times"></i>
                    }
                    else if (toast.Type == "info")
                    {
                        <i class="fas fa-info"></i>
                    }
                </div>
                <div class="toast-content">
                    <div class="toast-title">@toast.Title</div>
                    <div class="toast-message">@toast.Message</div>
                </div>
                <button class="toast-close" @onclick="() => RemoveToast(toast.Id)">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private bool showPassword = false;
    private List<ToastNotification> toasts = new List<ToastNotification>();
    private int toastIdCounter = 0;

    private async Task ShowToast(string title, string message, string type = "success")
    {
        var toast = new ToastNotification
        {
            Id = ++toastIdCounter,
            Title = title,
            Message = message,
            Type = type,
            IsVisible = false
        };

        toasts.Add(toast);
        StateHasChanged();

        await Task.Delay(100);
        toast.IsVisible = true;
        StateHasChanged();

        _ = Task.Delay(4000).ContinueWith(async _ =>
        {
            await InvokeAsync(() =>
    {
            RemoveToast(toast.Id);
        });
        });
    }

    private void RemoveToast(int toastId)
    {
        var toast = toasts.FirstOrDefault(t => t.Id == toastId);
        if (toast != null)
        {
            toast.IsVisible = false;
            StateHasChanged();

            Task.Delay(300).ContinueWith(_ =>
            {
                InvokeAsync(() =>
    {
                toasts.Remove(toast);
                StateHasChanged();
            });
            });
        }
    }

    protected override void OnInitialized()
    {
        SessionService.ClearSession();

    }

    private void TogglePassword()
    {
        try
        {
            var oldValue = showPassword;
            showPassword = !showPassword;
            StateHasChanged();
        }
        catch
        {

        }
    }

    private async Task HandleLogin()
{
    try
    {
        isLoading = true;
        StateHasChanged();

        var user = await AuthService.AuthenticateAsync(loginModel.Username, loginModel.Password, loginModel.Domain);

        if (user != null)
        {
            SessionService.SetCurrentUser(user);
            await ShowToast("Login Successful!", $"Welcome back, {user.Name}! Logged in to {user.Domain} domain.", "success");
            StateHasChanged();
            await Task.Delay(1500);
            Navigation.NavigateTo("/tickets", true);
        }
        else
        {
            var userExists = await AuthService.GetUserByEmailAsync(loginModel.Username);
            if (userExists != null && userExists.Domain != loginModel.Domain)
            {
                await ShowToast("Domain Mismatch", $"User exists but belongs to '{userExists.Domain}' domain. Please select the correct domain.", "error");
            }
            else
            {
                await ShowToast("Login Failed", "Invalid credentials. Please check your domain, username, and password.", "error");
            }
        }
    }
    catch (Exception ex)
    {
        await ShowToast("Login Error", $"An error occurred during login: {ex.Message}", "error");
    }
    finally
    {
        isLoading = false;
        StateHasChanged();
    }
}

    public class LoginModel
    {
        [Required(ErrorMessage = "Domain is required")]
        public string Domain { get; set; } = "";

        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }

    public class ToastNotification
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Message { get; set; } = "";
        public string Type { get; set; } = "success";
        public bool IsVisible { get; set; } = false;
    }

}