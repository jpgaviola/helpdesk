@page "/"
@page "/login"
@layout Components.Layout.SimpleLayout
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@using HelpdeskBlazor.Services
@inject IAuthService AuthService
@inject ISessionService SessionService

<PageTitle>Helpdesk System - Login</PageTitle>

<div class="login-page">
    <div class="login-container">
        <!-- Left Side - Branding -->
        <div class="login-left">
            <div class="login-left-content">
                <div class="logo">
                    <i class="fas fa-headset"></i>
                </div>
                <h2>Welcome to Helpdesk System</h2>
                <p>Your comprehensive IT support solution for seamless business operations</p>

                <div class="features">
                    <div class="feature-item">
                        <i class="fas fa-ticket-alt"></i>
                        <span>Track and manage support tickets</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-clock"></i>
                        <span>Real-time status updates</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-users"></i>
                        <span>Collaborative team support</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-chart-line"></i>
                        <span>Comprehensive reporting</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Side - Login Form -->
        <div class="login-right">
            <div class="company-logo">
                <img src="semirara.png" alt="Semirara Mining"
                    style="max-width: 200px; height: auto; margin-bottom: 20px;" />
            </div>

            <!-- Error/Success Messages -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message show">
                    <i class="fas fa-exclamation-circle"></i>
                    @errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="success-message show">
                    <i class="fas fa-check-circle"></i>
                    @successMessage
                </div>
            }

            <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm" class="login-form">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <div class="input-container">
                        <InputSelect @bind-Value="loginModel.Domain" class="form-control" id="domain">
                            <option value="">Select Domain</option>
                            <option value="SCPC">SCPC</option>
                            <option value="SMPC">SMPC</option>
                            <option value="SLPGC">SLPGC</option>
                        </InputSelect>
                        <i class="fas fa-building input-icon"></i>
                    </div>
                    <ValidationMessage For="@(() => loginModel.Domain)" />
                </div>

                <div class="form-group">
                    <label for="username">Username or Email</label>
                    <div class="input-container">
                        <InputText @bind-Value="loginModel.Username" class="form-control" id="username"
                            placeholder="Enter your username or email" />
                        <i class="fas fa-user input-icon"></i>
                    </div>
                    <ValidationMessage For="@(() => loginModel.Username)" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <div class="input-container">
                        <input type="@(showPassword ? "text" : "password")" @bind="loginModel.Password"
                            class="form-control" id="password" placeholder="Enter your password" />
                        <i class="fas fa-lock input-icon"></i>
                        <button type="button" class="password-toggle-btn" @onclick="TogglePassword"
                            style="position: absolute; right: 15px; top: 50%; transform: translateY(-50%); background: none; border: none; cursor: pointer; z-index: 999; color: #666; padding: 5px;">
                            <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <button type="submit" class="login-btn" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <div class="spinner"></div>
                        <span>Signing In...</span>
                    }
                    else
                    {
                        <span>Sign In</span>
                    }
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private bool showPassword = false;
    private string? errorMessage;
    private string? successMessage;

    protected override void OnInitialized()
    {
        SessionService.ClearSession();

        errorMessage = null;
        successMessage = null;
    }

    private void TogglePassword()
    {
        try
        {
            var oldValue = showPassword;
            showPassword = !showPassword;
            StateHasChanged();
        }
        catch
        {

        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            successMessage = null;
            StateHasChanged();

            var user = await AuthService.AuthenticateAsync(loginModel.Username, loginModel.Password, loginModel.Domain);

            if (user != null)
            {
                SessionService.SetCurrentUser(user);
                successMessage = $"Welcome back, {user.Name}! Logged in to {user.Domain} domain.";
                StateHasChanged();
                await Task.Delay(1000);
                Navigation.NavigateTo("/tickets", true);
            }
            else
            {
                var userExists = await AuthService.GetUserByEmailAsync(loginModel.Username);
                if (userExists != null && userExists.Domain != loginModel.Domain)
                {
                    errorMessage = $"User exists but belongs to '{userExists.Domain}' domain. Please select the correct domain.";
                }
                else
                {
                    errorMessage = "Invalid credentials. Please check your domain, username, and password.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred during login: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Domain is required")]
        public string Domain { get; set; } = "";

        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }

}