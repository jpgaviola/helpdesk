@page "/drafts"
@using HelpdeskBlazor.Models
@inject HelpdeskBlazor.Services.ITicketService TicketService
@inject HelpdeskBlazor.Services.IDocumentRequestService DocumentRequestService
@inject HelpdeskBlazor.Services.ISessionService SessionService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Helpdesk System</PageTitle>

<style>
    .drafts-container {
        padding: 30px;
        background: #f8f9fa;
        min-height: calc(100vh - 80px);
    }

    .page-header {
        background: white;
        padding: 25px 30px;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
        margin-bottom: 25px;
        border-left: 4px solid #ff6b35;
    }

    .page-title {
        font-size: 28px;
        font-weight: 700;
        color: #0A1A28;
        margin: 0 0 8px 0;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .page-title i {
        color: #ff6b35;
        font-size: 24px;
    }

    .page-subtitle {
        color: #666;
        font-size: 16px;
        margin: 0;
    }

    .drafts-section {
        margin-bottom: 30px;
    }

    .drafts-section h3 {
        font-size: 20px;
        font-weight: 600;
        color: #0A1A28;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .drafts-section h3 i {
        color: #ff6b35;
    }

    .draft-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
        margin-bottom: 20px;
        overflow: hidden;
        border: 2px solid transparent;
        transition: all 0.3s ease;
    }

    .draft-card:hover {
        border-color: #ff6b35;
        transform: translateY(-2px);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);
    }

    .draft-header {
        padding: 20px 25px 15px;
        border-bottom: 1px solid #E7EAEE;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .draft-header h4 {
        margin: 0;
        font-size: 16px;
        font-weight: 600;
        color: #0A1A28;
    }

    .draft-date {
        color: #666;
        font-size: 12px;
        font-style: italic;
    }

    .draft-content {
        padding: 20px 25px;
    }

    .draft-content p {
        margin: 0 0 10px 0;
        font-size: 14px;
        color: #555;
    }

    .draft-description {
        color: #777;
        font-style: italic;
        margin-top: 15px !important;
    }

    .draft-actions {
        padding: 15px 25px 20px;
        display: flex;
        gap: 10px;
    }

    .btn {
        padding: 8px 16px;
        border-radius: 6px;
        font-size: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        border: none;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 6px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(255, 107, 53, 0.3);
        color: white;
        text-decoration: none;
    }

    .btn-outline {
        background: transparent;
        color: #666;
        border: 1px solid #E7EAEE;
    }

    .btn-outline:hover {
        background: #f8f9fa;
        border-color: #dee2e6;
        color: #333;
        text-decoration: none;
    }

    .btn-sm {
        padding: 6px 12px;
        font-size: 11px;
    }

    .no-drafts {
        text-align: center;
        padding: 60px 20px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
    }

    .no-drafts i {
        font-size: 48px;
        color: #ccc;
        margin-bottom: 20px;
    }

    .no-drafts h3 {
        font-size: 18px;
        color: #666;
        margin-bottom: 10px;
    }

    .no-drafts p {
        color: #999;
        margin-bottom: 25px;
    }

    @@media (max-width: 768px) {
        .drafts-container {
            padding: 20px 15px;
        }

        .draft-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }

        .draft-actions {
            flex-direction: column;
        }

        .form-row {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .modal-container {
            margin: 10px;
            max-width: calc(100% - 20px);
        }

        .modal-actions {
            flex-direction: column-reverse;
        }
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        padding: 20px;
    }

    .modal-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        width: 100%;
        max-width: 800px;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-header {
        padding: 20px 25px;
        border-bottom: 1px solid #E7EAEE;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 12px 12px 0 0;
    }

    .modal-header h3 {
        margin: 0;
        font-size: 18px;
        font-weight: 600;
        color: #0A1A28;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .modal-header h3 i {
        color: #ff6b35;
    }

    .modal-close {
        background: none;
        border: none;
        color: #666;
        cursor: pointer;
        padding: 5px;
        border-radius: 4px;
        transition: all 0.3s ease;
    }

    .modal-close:hover {
        background: #f8f9fa;
        color: #333;
    }

    .modal-content {
        padding: 25px;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        font-weight: 600;
        color: #0A1A28;
        margin-bottom: 6px;
        font-size: 14px;
    }

    .form-label.required::after {
        content: " *";
        color: #dc3545;
    }

    .form-input,
    .form-select,
    .form-textarea {
        width: 100%;
        padding: 10px 12px;
        border: 2px solid #E7EAEE;
        border-radius: 6px;
        font-size: 14px;
        transition: all 0.3s ease;
        background: #fff;
        font-family: inherit;
    }

    .form-input:focus,
    .form-select:focus,
    .form-textarea:focus {
        outline: none;
        border-color: #ff6b35;
        box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);
    }

    .form-textarea {
        resize: vertical;
        min-height: 100px;
    }

    .form-select {
        cursor: pointer;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
        background-position: right 10px center;
        background-repeat: no-repeat;
        background-size: 16px;
        padding-right: 35px;
        appearance: none;
    }

    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        padding-top: 20px;
        border-top: 1px solid #E7EAEE;
        margin-top: 20px;
    }

    .loading-spinner {
        border: 2px solid transparent;
        border-top: 2px solid currentColor;
        border-radius: 50%;
        width: 12px;
        height: 12px;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* Toast Notification Styles */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        display: flex;
        flex-direction: column;
        gap: 10px;
        pointer-events: none;
    }

    .toast {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        padding: 16px 20px;
        display: flex;
        align-items: center;
        gap: 12px;
        min-width: 300px;
        max-width: 400px;
        transform: translateX(100%);
        transition: all 0.3s ease;
        pointer-events: auto;
        border-left: 4px solid;
    }

    .toast.show {
        transform: translateX(0);
    }

    .toast.success {
        border-left-color: #28a745;
    }

    .toast.error {
        border-left-color: #dc3545;
    }

    .toast.info {
        border-left-color: #007bff;
    }

    .toast.warning {
        border-left-color: #ffc107;
    }

    .toast-icon {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 12px;
        flex-shrink: 0;
    }

    .toast.success .toast-icon {
        background: #28a745;
    }

    .toast.error .toast-icon {
        background: #dc3545;
    }

    .toast.info .toast-icon {
        background: #007bff;
    }

    .toast.warning .toast-icon {
        background: #ffc107;
    }

    .toast-content {
        flex: 1;
    }

    .toast-title {
        font-weight: 600;
        color: #0A1A28;
        font-size: 14px;
        margin: 0 0 2px 0;
    }

    .toast-message {
        color: #666;
        font-size: 13px;
        margin: 0;
    }

    .toast-close {
        background: none;
        border: none;
        color: #999;
        cursor: pointer;
        padding: 0;
        font-size: 16px;
        line-height: 1;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .toast-close:hover {
        color: #666;
    }
</style>

<div class="drafts-container">
    <div class="page-header">
        <h1 class="page-title">
            <i class="fas fa-edit"></i>
            My Drafts
        </h1>
        <p class="page-subtitle">Continue working on your saved drafts</p>
    </div>

    <!-- Ticket Drafts -->
    @if (ticketDrafts?.Count > 0)
    {
        <div class="drafts-section">
            <h3><i class="fas fa-ticket-alt"></i> Ticket Drafts</h3>
            @foreach (var draft in ticketDrafts)
            {
                <div class="draft-card">
                    <div class="draft-header">
                        <h4>@draft.Subject</h4>
                        <span class="draft-date">Saved @draft.DraftSavedDate?.ToString("MMM dd, yyyy HH:mm")</span>
                    </div>
                    <div class="draft-content">
                        <p><strong>Company:</strong> @draft.Company</p>
                        <p><strong>Category:</strong> @draft.Category</p>
                        <p class="draft-description">@TruncateText(draft.Description)</p>
                    </div>
                    <div class="draft-actions">
                        <button class="btn btn-primary btn-sm" @onclick="() => ContinueTicketDraft(draft.Id)">
                            <i class="fas fa-edit"></i> Continue Editing
                        </button>
                        <button class="btn btn-outline btn-sm" @onclick="() => DeleteTicketDraft(draft.Id)">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Document Request Drafts -->
    @if (documentDrafts?.Count > 0)
    {
        <div class="drafts-section">
            <h3><i class="fas fa-file-alt"></i> Document Request Drafts</h3>
            @foreach (var draft in documentDrafts)
            {
                <div class="draft-card">
                    <div class="draft-header">
                        <h4>Document Request</h4>
                        <span class="draft-date">Saved @draft.DraftSavedDate?.ToString("MMM dd, yyyy HH:mm")</span>
                    </div>
                    <div class="draft-content">
                        <p><strong>Company:</strong> @draft.Company</p>
                        <p><strong>Date Needed:</strong> @draft.DateNeeded.ToString("MMM dd, yyyy")</p>
                    </div>
                    <div class="draft-actions">
                        <button class="btn btn-primary btn-sm" @onclick="() => ContinueDocumentDraft(draft.Id)">
                            <i class="fas fa-edit"></i> Continue Editing
                        </button>
                        <button class="btn btn-outline btn-sm" @onclick="() => DeleteDocumentDraft(draft.Id)">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            }
        </div>
    }

    @if ((ticketDrafts?.Count ?? 0) == 0 && (documentDrafts?.Count ?? 0) == 0)
    {
        <div class="no-drafts">
            <i class="fas fa-edit"></i>
            <h3>No Drafts Found</h3>
            <p>You don't have any saved drafts yet.</p>
        </div>
    }

    <!-- Toast Container -->
    <div class="toast-container">
        @foreach (var toast in toasts)
        {
            <div class="toast @toast.Type @(toast.IsVisible ? "show" : "")">
                <div class="toast-icon">
                    @if (toast.Type == "success")
                    {
                        <i class="fas fa-check"></i>
                    }
                    else if (toast.Type == "error")
                    {
                        <i class="fas fa-times"></i>
                    }
                    else if (toast.Type == "info")
                    {
                        <i class="fas fa-info"></i>
                    }
                    else if (toast.Type == "warning")
                    {
                        <i class="fas fa-exclamation"></i>
                    }
                </div>
                <div class="toast-content">
                    <div class="toast-title">@toast.Title</div>
                    <div class="toast-message">@toast.Message</div>
                </div>
                <button class="toast-close" @onclick="() => RemoveToast(toast.Id)">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>

<!-- Edit Draft Modal -->
@if (showEditModal && selectedDraft != null)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-container" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>
                    <i class="fas fa-edit"></i>
                    Edit @(selectedDraftType == "ticket" ? "Ticket" : "Document Request") Draft
                </h3>
                <button class="modal-close" @onclick="CloseModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="modal-content">
                @if (selectedDraftType == "ticket" && selectedTicketDraft != null)
                {
                    <EditForm Model="@selectedTicketDraft" OnValidSubmit="@HandleTicketSubmit">
                        <DataAnnotationsValidator />

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label required">APP Reference No.</label>
                                <InputText @bind-Value="selectedTicketDraft.AppReferenceNo" class="form-input" />
                                <ValidationMessage For="@(() => selectedTicketDraft.AppReferenceNo)" />
                            </div>
                            <div class="form-group">
                                <label class="form-label required">Company</label>
                                <InputSelect @bind-Value="selectedTicketDraft.Company" class="form-select">
                                    <option value="">Select Company</option>
                                    <option value="SMPC">SMPC</option>
                                    <option value="SCPC">SCPC</option>
                                    <option value="SLPGC">SLPGC</option>
                                    <option value="SCRC">SCRC</option>
                                    <option value="SIPDI">SIPDI</option>
                                    <option value="SCI">SCI</option>
                                    <option value="SEUI">SEUI</option>
                                    <option value="SELPGC">SELPGC</option>
                                    <option value="SCC">SCC</option>
                                    <option value="STC">STC</option>
                                    <option value="DWSSII">DWSSII</option>
                                    <option value="SRPGC">SRPGC</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => selectedTicketDraft.Company)" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label required">Location</label>
                                <InputSelect @bind-Value="selectedTicketDraft.Location" class="form-select">
                                    <option value="">Select Location</option>
                                    <option value="Makati">Makati</option>
                                    <option value="Calaca">Calaca</option>
                                    <option value="Minesite">Minesite</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => selectedTicketDraft.Location)" />
                            </div>
                            <div class="form-group">
                                <label class="form-label required">Category</label>
                                <InputSelect @bind-Value="selectedTicketDraft.Category" class="form-select">
                                    <option value="">Select Category</option>
                                    <option value="Contract Review/Preparation">Contract Review/Preparation</option>
                                    <option value="Legal Research & Opinion">Legal Research & Opinion</option>
                                    <option value="Secretary's Certificate">Secretary's Certificate</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => selectedTicketDraft.Category)" />
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label required">Department</label>
                            <InputSelect @bind-Value="selectedTicketDraft.Department" class="form-select">
                                <option value="">Select Department</option>
                                <option value="IT">Information Technology</option>
                                <option value="HR">Human Resources</option>
                                <option value="Finance">Finance</option>
                                <option value="Operations">Operations</option>
                                <option value="Facilities">Facilities</option>
                                <option value="Security">Security</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => selectedTicketDraft.Department)" />
                        </div>

                        <div class="form-group">
                            <label class="form-label required">Description</label>
                            <InputTextArea @bind-Value="selectedTicketDraft.Description" class="form-textarea" rows="4" />
                            <ValidationMessage For="@(() => selectedTicketDraft.Description)" />
                        </div>

                        <div class="modal-actions">
                            <button type="button" class="btn btn-outline" @onclick="CloseModal">
                                <i class="fas fa-times"></i> Cancel
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="SaveTicketDraft" disabled="@isSubmitting">
                                <i class="fas fa-save"></i> Save Draft
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <div class="loading-spinner"></div>
                                    <span>Submitting...</span>
                                }
                                else
                                {
                                    <i class="fas fa-paper-plane"></i>
                                    <span>Submit Ticket</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                }

                @if (selectedDraftType == "document" && selectedDocumentDraft != null)
                {
                    <EditForm Model="@selectedDocumentDraft" OnValidSubmit="@HandleDocumentSubmit">
                        <DataAnnotationsValidator />

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label required">Company</label>
                                <InputSelect @bind-Value="selectedDocumentDraft.Company" class="form-select">
                                    <option value="">Select Company</option>
                                    <option value="SMPC">SMPC</option>
                                    <option value="SCPC">SCPC</option>
                                    <option value="SLPGC">SLPGC</option>
                                    <option value="SCRC">SCRC</option>
                                    <option value="SIPDI">SIPDI</option>
                                    <option value="SCI">SCI</option>
                                    <option value="SEUI">SEUI</option>
                                    <option value="SELPGC">SELPGC</option>
                                    <option value="SCC">SCC</option>
                                    <option value="STC">STC</option>
                                    <option value="DWSSII">DWSSII</option>
                                    <option value="SRPGC">SRPGC</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => selectedDocumentDraft.Company)" />
                            </div>
                            <div class="form-group">
                                <label class="form-label required">Date Needed</label>
                                <InputDate @bind-Value="selectedDocumentDraft.DateNeeded" class="form-input" />
                                <ValidationMessage For="@(() => selectedDocumentDraft.DateNeeded)" />
                            </div>
                        </div>

                        <!-- Document Items Section -->
                        <div class="form-group">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                                <label class="form-label">Document Items</label>
                                <button type="button" class="btn btn-outline btn-sm" @onclick="AddDocumentItem">
                                    <i class="fas fa-plus"></i> Add Item
                                </button>
                            </div>

                            @if (selectedDocumentDraft.DocumentItems?.Any() == true)
                            {
                                @for (int i = 0; i < selectedDocumentDraft.DocumentItems.Count; i++)
                                {
                                    var index = i;
                                    var item = selectedDocumentDraft.DocumentItems.ElementAt(index);
                                    
                                    <div class="document-item-card" style="border: 1px solid #E7EAEE; border-radius: 8px; padding: 20px; margin-bottom: 15px; background: #f8f9fa;">
                                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                                        <h5 style="margin: 0; color: #0A1A28;">Document Item @(index + 1)</h5>
                                        @if (selectedDocumentDraft.DocumentItems.Count > 1)
                                        {
                                            <button type="button" class="btn btn-outline btn-sm" @onclick="() => RemoveDocumentItem(index)" 
                                                    style="color: #dc3545; border-color: #dc3545; margin-left: auto;">
                                                <i class="fas fa-trash"></i> Remove
                                            </button>
                                        }
                                    </div>

                                        <div class="form-row">
                                            <div class="form-group">
                                                <label class="form-label required">Document Name</label>
                                                <InputText @bind-Value="item.DocumentName" class="form-input" />
                                            </div>
                                            <div class="form-group">
                                                <label class="form-label required">Type</label>
                                                <InputSelect @bind-Value="item.Type" class="form-select">
                                                    <option value="">Select Type</option>
                                                    <option value="Photocopy">Photocopy</option>
                                                    <option value="Certified by the SEC">Certified by the SEC</option>
                                                    <option value="Certified by the Corporate Secretary">Certified by the Corporate Secretary</option>
                                                </InputSelect>
                                            </div>
                                        </div>

                                        <div class="form-row">
                                            <div class="form-group">
                                                <label class="form-label required">Number of Copies</label>
                                                <InputNumber @bind-Value="item.NumberOfCopies" class="form-input" min="1" max="100" />
                                            </div>
                                            <div class="form-group">
                                                <!-- Empty div to maintain grid layout -->
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="form-label required">Particulars/Reason</label>
                                            <InputTextArea @bind-Value="item.Particulars" class="form-textarea" rows="3" />
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div style="text-align: center; padding: 20px; border: 2px dashed #E7EAEE; border-radius: 8px; color: #666;">
                                    <i class="fas fa-file-alt" style="font-size: 24px; margin-bottom: 10px;"></i>
                                    <p>No document items added yet. Click "Add Item" to get started.</p>
                                </div>
                            }
                        </div>

                        <div class="modal-actions">
                            <button type="button" class="btn btn-outline" @onclick="CloseModal">
                                <i class="fas fa-times"></i> Cancel
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="SaveDocumentDraft" disabled="@isSubmitting">
                                <i class="fas fa-save"></i> Save Draft
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <div class="loading-spinner"></div>
                                    <span>Submitting...</span>
                                }
                                else
                                {
                                    <i class="fas fa-paper-plane"></i>
                                    <span>Submit Request</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
}

@code {
    private List<Ticket>? ticketDrafts;
    private List<DocumentRequest>? documentDrafts;
    private bool showEditModal = false;
    private string selectedDraftType = "";
    private object? selectedDraft = null;
    private Ticket? selectedTicketDraft = null;
    private DocumentRequest? selectedDocumentDraft = null;
    private bool isSubmitting = false;
    private List<ToastNotification> toasts = new List<ToastNotification>();
    private int toastIdCounter = 0;

    protected override async Task OnInitializedAsync()
    {
        if (!SessionService.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadDrafts();
    }

    private async Task ShowToast(string title, string message, string type = "success")
    {
        var toast = new ToastNotification
        {
            Id = ++toastIdCounter,
            Title = title,
            Message = message,
            Type = type,
            IsVisible = false
        };

        toasts.Add(toast);
        StateHasChanged();

        await Task.Delay(100);
        toast.IsVisible = true;
        StateHasChanged();

        _ = Task.Delay(4000).ContinueWith(async _ =>
        {
            await InvokeAsync(() =>
    {
            RemoveToast(toast.Id);
        });
        });
    }

    private void RemoveToast(int toastId)
    {
        var toast = toasts.FirstOrDefault(t => t.Id == toastId);
        if (toast != null)
        {
            toast.IsVisible = false;
            StateHasChanged();

            Task.Delay(300).ContinueWith(_ =>
            {
                InvokeAsync(() =>
    {
                toasts.Remove(toast);
                StateHasChanged();
            });
            });
        }
    }

    private async Task LoadDrafts()
    {
        try
        {
            if (SessionService.CurrentUser?.Id != null)
            {
                ticketDrafts = await TicketService.GetUserDraftsAsync(SessionService.CurrentUser.Id);
                documentDrafts = await DocumentRequestService.GetUserDraftsAsync(SessionService.CurrentUser.Id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading drafts: {ex.Message}");
            ticketDrafts = new List<Ticket>();
            documentDrafts = new List<DocumentRequest>();
        }
    }

    private async void ContinueDocumentDraft(int draftId)
{
    try
    {
        var fullDraft = await DocumentRequestService.GetDraftByIdAsync(draftId);
        if (fullDraft != null)
        {
            selectedDocumentDraft = new DocumentRequest
            {
                Id = fullDraft.Id,
                Company = fullDraft.Company,
                DateNeeded = fullDraft.DateNeeded,
                TimeNeeded = fullDraft.TimeNeeded,
                Particulars = fullDraft.Particulars,
                Status = fullDraft.Status,
                CreatedBy = fullDraft.CreatedBy,
                RequesterName = fullDraft.RequesterName,
                RequesterEmail = fullDraft.RequesterEmail,
                IsDraft = fullDraft.IsDraft,
                DraftSavedDate = fullDraft.DraftSavedDate,
                CreatedDate = fullDraft.CreatedDate,
                DocumentItems = new List<DocumentItem>()
            };

            if (fullDraft.DocumentItems?.Any() == true)
            {
                foreach (var item in fullDraft.DocumentItems.Where(x => !x.IsDeleted))
                {
                    selectedDocumentDraft.DocumentItems.Add(new DocumentItem
                    {
                        Id = item.Id,
                        DocumentRequestId = item.DocumentRequestId,
                        DocumentName = item.DocumentName ?? "",
                        Type = item.Type ?? "",
                        NumberOfCopies = item.NumberOfCopies,
                        Particulars = item.Particulars ?? "",
                        CreatedDate = item.CreatedDate,
                        IsDeleted = false
                    });
                }
            }

            if (!selectedDocumentDraft.DocumentItems.Any())
            {
                selectedDocumentDraft.DocumentItems.Add(new DocumentItem
                {
                    DocumentRequestId = selectedDocumentDraft.Id,
                    DocumentName = "",
                    Type = "",
                    NumberOfCopies = 1,
                    Particulars = "",
                    CreatedDate = DateTime.Now,
                    IsDeleted = false
                });
            }

            selectedDraftType = "document";
            selectedDraft = selectedDocumentDraft;
            showEditModal = true;
            StateHasChanged();
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error loading document draft: {ex.Message}");
        await ShowToast("Error", "Failed to load draft for editing", "error");
    }
}

    private async void ContinueTicketDraft(int draftId)
    {
        try
        {
            var fullDraft = await TicketService.GetDraftByIdAsync(draftId);
            if (fullDraft != null)
            {
                selectedTicketDraft = new Ticket
                {
                    Id = fullDraft.Id,
                    AppReferenceNo = fullDraft.AppReferenceNo,
                    Company = fullDraft.Company,
                    Location = fullDraft.Location,
                    Category = fullDraft.Category,
                    Department = fullDraft.Department,
                    Description = fullDraft.Description,
                    Subject = fullDraft.Subject,
                    Priority = fullDraft.Priority,
                    Status = fullDraft.Status,
                    RequestDate = fullDraft.RequestDate,
                    DateNeeded = fullDraft.DateNeeded,
                    TimeNeeded = fullDraft.TimeNeeded,
                    CreatedBy = fullDraft.CreatedBy,
                    RequesterName = fullDraft.RequesterName,
                    RequesterEmail = fullDraft.RequesterEmail,
                    IsDraft = fullDraft.IsDraft,
                    DraftSavedDate = fullDraft.DraftSavedDate,
                    CreatedDate = fullDraft.CreatedDate
                };
                selectedDraftType = "ticket";
                selectedDraft = selectedTicketDraft;
                showEditModal = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading ticket draft: {ex.Message}");
            await ShowToast("Error", "Failed to load draft for editing", "error");
        }
    }

    private void CloseModal()
    {
        showEditModal = false;
        selectedDraft = null;
        selectedTicketDraft = null;
        selectedDocumentDraft = null;
        selectedDraftType = "";
        isSubmitting = false;
    }

    private async Task SaveTicketDraft()
    {
        if (selectedTicketDraft == null) return;

        isSubmitting = true;
        try
        {
            var originalDraft = await TicketService.GetDraftByIdAsync(selectedTicketDraft.Id);
            if (originalDraft == null)
            {
                await ShowToast("Error", "Draft not found in database", "error");
                return;
            }

            originalDraft.AppReferenceNo = selectedTicketDraft.AppReferenceNo;
            originalDraft.Company = selectedTicketDraft.Company;
            originalDraft.Location = selectedTicketDraft.Location;
            originalDraft.Category = selectedTicketDraft.Category;
            originalDraft.Department = selectedTicketDraft.Department;
            originalDraft.Description = selectedTicketDraft.Description;
            originalDraft.DraftSavedDate = DateTime.Now;
            originalDraft.LastModifiedDate = DateTime.Now;

            await TicketService.UpdateTicketAsync(originalDraft);

            var draftInList = ticketDrafts?.FirstOrDefault(d => d.Id == selectedTicketDraft.Id);
            if (draftInList != null)
            {
                draftInList.AppReferenceNo = originalDraft.AppReferenceNo;
                draftInList.Company = originalDraft.Company;
                draftInList.Location = originalDraft.Location;
                draftInList.Category = originalDraft.Category;
                draftInList.Department = originalDraft.Department;
                draftInList.Description = originalDraft.Description;
                draftInList.DraftSavedDate = originalDraft.DraftSavedDate;
            }

            CloseModal();
            await ShowToast("Draft Saved", "Your ticket draft has been saved successfully!", "success");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving ticket draft: {ex.Message}");
            await ShowToast("Save Failed", $"Failed to save draft: {ex.Message}", "error");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task HandleTicketSubmit()
    {
        if (selectedTicketDraft == null) return;

        isSubmitting = true;
        try
        {
            var originalDraft = await TicketService.GetDraftByIdAsync(selectedTicketDraft.Id);
            if (originalDraft == null)
            {
                await ShowToast("Error", "Draft not found in database", "error");
                return;
            }

            originalDraft.AppReferenceNo = selectedTicketDraft.AppReferenceNo;
            originalDraft.Company = selectedTicketDraft.Company;
            originalDraft.Location = selectedTicketDraft.Location;
            originalDraft.Category = selectedTicketDraft.Category;
            originalDraft.Department = selectedTicketDraft.Department;
            originalDraft.Description = selectedTicketDraft.Description;
            originalDraft.IsDraft = false;
            originalDraft.Status = "Pending";
            originalDraft.ModifiedDate = DateTime.Now;
            originalDraft.Subject = $"{selectedTicketDraft.Category} - {selectedTicketDraft.Company}";

            await TicketService.UpdateTicketAsync(originalDraft);

            ticketDrafts?.RemoveAll(d => d.Id == selectedTicketDraft.Id);
            CloseModal();

            await ShowToast("Ticket Submitted", $"Ticket #{originalDraft.Id} has been submitted successfully!", "success");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting ticket: {ex.Message}");
            await ShowToast("Submission Failed", $"Failed to submit ticket: {ex.Message}", "error");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task DeleteDraft(string type, int draftId)
    {
        try
        {
            if (type == "ticket")
            {
                await TicketService.DeleteDraftAsync(draftId);
                ticketDrafts?.RemoveAll(d => d.Id == draftId);
                await ShowToast("Draft Deleted",
                "Ticket draft has been deleted successfully!", "info");
            }
            else
            {
                await DocumentRequestService.DeleteDraftAsync(draftId);
                documentDrafts?.RemoveAll(d => d.Id == draftId);
                await ShowToast("Draft Deleted",
                "Document request draft has been deleted successfully!", "info");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting draft: {ex.Message}");
            await ShowToast("Delete Failed",
            $"Failed to delete draft: {ex.Message}", "error");
        }
    }

    private async Task DeleteTicketDraft(int draftId)
    {
        await DeleteDraft("ticket", draftId);
    }

    private async Task DeleteDocumentDraft(int draftId)
    {
        await DeleteDraft("document", draftId);
    }

    private string TruncateText(string? text, int maxLength = 100)
    {
        if (string.IsNullOrEmpty(text)) return string.Empty;
        return text.Length > maxLength ? text.Substring(0, maxLength) + "..." : text;
    }

    private async Task SaveDocumentDraft()
{
    if (selectedDocumentDraft == null) return;

    isSubmitting = true;
    try
    {
        var updateRequest = new DocumentRequest
        {
            Id = selectedDocumentDraft.Id,
            Company = selectedDocumentDraft.Company,
            DateNeeded = selectedDocumentDraft.DateNeeded,
            Particulars = selectedDocumentDraft.Particulars ?? "",
            IsDraft = true,
            Status = "Draft",
            DraftSavedDate = DateTime.Now,
            LastModifiedDate = DateTime.Now,
            DocumentItems = new List<DocumentItem>()
        };

        if (selectedDocumentDraft.DocumentItems?.Any() == true)
        {
            foreach (var item in selectedDocumentDraft.DocumentItems.ToList())
            {
                updateRequest.DocumentItems.Add(new DocumentItem
                {
                    DocumentName = item.DocumentName ?? "",
                    Type = item.Type ?? "",
                    NumberOfCopies = item.NumberOfCopies,
                    Particulars = item.Particulars ?? "",
                    CreatedDate = DateTime.Now,
                    IsDeleted = false
                });
            }
        }

        await DocumentRequestService.UpdateDocumentRequestWithItemsAsync(updateRequest);

        var draftInList = documentDrafts?.FirstOrDefault(d => d.Id == selectedDocumentDraft.Id);
        if (draftInList != null)
        {
            draftInList.Company = updateRequest.Company;
            draftInList.DateNeeded = updateRequest.DateNeeded;
            draftInList.Particulars = updateRequest.Particulars;
            draftInList.DraftSavedDate = updateRequest.DraftSavedDate;
        }

        CloseModal();
        await ShowToast("Draft Saved", "Your document request draft has been saved successfully!", "success");
        StateHasChanged();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error saving document draft: {ex.Message}");
        await ShowToast("Save Failed", $"Failed to save draft: {ex.Message}", "error");
    }
    finally
    {
        isSubmitting = false;
    }
}

private async Task HandleDocumentSubmit()
{
    if (selectedDocumentDraft == null) return;

    isSubmitting = true;
    try
    {
        var submitRequest = new DocumentRequest
        {
            Id = selectedDocumentDraft.Id,
            Company = selectedDocumentDraft.Company,
            DateNeeded = selectedDocumentDraft.DateNeeded,
            Particulars = selectedDocumentDraft.Particulars ?? "",
            IsDraft = false,
            Status = "Pending",
            DraftSavedDate = selectedDocumentDraft.DraftSavedDate,
            LastModifiedDate = DateTime.Now,
            DocumentItems = new List<DocumentItem>()
        };

        if (selectedDocumentDraft.DocumentItems?.Any() == true)
        {
            foreach (var item in selectedDocumentDraft.DocumentItems.ToList())
            {
                submitRequest.DocumentItems.Add(new DocumentItem
                {
                    DocumentName = item.DocumentName ?? "",
                    Type = item.Type ?? "",
                    NumberOfCopies = item.NumberOfCopies,
                    Particulars = item.Particulars ?? "",
                    CreatedDate = DateTime.Now,
                    IsDeleted = false
                });
            }
        }

        await DocumentRequestService.UpdateDocumentRequestWithItemsAsync(submitRequest);

        if (documentDrafts != null)
        {
            var draftToRemove = documentDrafts.FirstOrDefault(d => d.Id == selectedDocumentDraft.Id);
            if (draftToRemove != null)
            {
                documentDrafts.Remove(draftToRemove);
            }
        }
        
        CloseModal();

        await ShowToast("Document Request Submitted", $"Document request #{submitRequest.Id} has been submitted successfully!", "success");
        StateHasChanged();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error submitting document request: {ex.Message}");
        await ShowToast("Submission Failed", $"Failed to submit document request: {ex.Message}", "error");
    }
    finally
    {
        isSubmitting = false;
    }
}

private void AddDocumentItem()
{
    if (selectedDocumentDraft == null) return;

    var currentItems = selectedDocumentDraft.DocumentItems?.ToList() ?? new List<DocumentItem>();
    
    currentItems.Add(new DocumentItem
    {
        DocumentRequestId = selectedDocumentDraft.Id,
        DocumentName = "",
        Type = "",
        NumberOfCopies = 1,
        Particulars = "",
        CreatedDate = DateTime.Now,
        IsDeleted = false
    });

    selectedDocumentDraft.DocumentItems = currentItems;
    StateHasChanged();
}

private void RemoveDocumentItem(int index)
{
    if (selectedDocumentDraft?.DocumentItems == null || 
        index < 0 || 
        selectedDocumentDraft.DocumentItems.Count <= 1) return;

    var currentItems = selectedDocumentDraft.DocumentItems.ToList();
    
    if (index < currentItems.Count)
    {
        currentItems.RemoveAt(index);
        selectedDocumentDraft.DocumentItems = currentItems;
        StateHasChanged();
    }
}

    public class ToastNotification
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Message { get; set; } = "";
        public string Type { get; set; } = "success";
        public bool IsVisible { get; set; } = false;
    }
}