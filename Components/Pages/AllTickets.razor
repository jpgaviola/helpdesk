@page "/tickets"
@rendermode InteractiveServer
@using Microsoft.JSInterop
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject HelpdeskBlazor.Services.ITicketService TicketService
@using HelpdeskBlazor.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject HelpdeskBlazor.Services.IDocumentRequestService DocumentRequestService
@inject HelpdeskBlazor.Services.IUserService UserService

<style>
    .tickets-container {
        margin-left: 0;
        padding: 30px 30px 80px 30px;
        background: #f8f9fa;
        min-height: calc(100vh - 80px);
    }

    .page-header {
        background: white;
        padding: 25px 30px;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0,0,0,0.08);
        margin-bottom: 25px;
        border-left: 4px solid #ff6b35;
    }

    .page-title {
        font-size: 28px;
        font-weight: 700;
        color: #0A1A28;
        margin: 0 0 8px 0;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .page-title i {
        color: #ff6b35;
        font-size: 24px;
    }

    .page-subtitle {
        color: #666;
        font-size: 16px;
        margin: 0;
    }

    .tickets-toolbar {
        background: white;
        padding: 20px 25px;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0,0,0,0.08);
        margin-bottom: 25px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 20px;
    }

    .toolbar-left {
        display: flex;
        align-items: center;
        gap: 15px;
        flex-wrap: wrap;
    }

    .toolbar-right {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .search-box {
        position: relative;
        min-width: 300px;
    }

    .search-input {
        width: 100%;
        padding: 12px 45px 12px 15px;
        border: 2px solid #E7EAEE;
        border-radius: 8px;
        font-size: 14px;
        transition: all 0.3s ease;
        background: #fff;
    }

    .search-input:focus {
        outline: none;
        border-color: #ff6b35;
        box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);
    }

    .search-icon {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: #999;
        font-size: 16px;
    }

    .filter-dropdown {
        padding: 10px 15px;
        border: 2px solid #E7EAEE;
        border-radius: 8px;
        font-size: 14px;
        background: white;
        color: #666;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 140px;
    }

    .filter-dropdown:focus {
        outline: none;
        border-color: #ff6b35;
        box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);
    }

    .create-ticket-btn {
        background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
    }

    .create-ticket-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(255, 107, 53, 0.3);
        color: white;
        text-decoration: none;
    }

    .tickets-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 25px;
    }

    .stat-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0,0,0,0.08);
        text-align: center;
        transition: all 0.3s ease;
    }

    .stat-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.12);
    }

    .stat-number {
        font-size: 32px;
        font-weight: 700;
        margin-bottom: 5px;
    }

    .stat-label {
        font-size: 14px;
        color: #666;
        font-weight: 500;
    }

    .stat-card.total .stat-number { color: #007bff; }
    .stat-card.rejected .stat-number { color: #a72828; }
    .stat-card.pending .stat-number { color: #ffc107; }
    .stat-card.executed .stat-number { color: #28a745; }

    .tickets-table-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0,0,0,0.08);
        overflow: visible;
        position: relative;
    }

    .table-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 20px 25px;
        border-bottom: 1px solid #E7EAEE;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .table-title {
        font-size: 18px;
        font-weight: 600;
        color: #0A1A28;
        margin: 0;
    }

    .tickets-table {
        width: 100%;
        border-collapse: collapse;
    }

    .tickets-table th {
        background: #f8f9fa;
        padding: 15px 20px;
        text-align: left;
        font-weight: 600;
        color: #0A1A28;
        font-size: 14px;
        border-bottom: 2px solid #E7EAEE;
        transition: all 0.3s ease;
    }

    .tickets-table th.center,
    .tickets-table td.center {
        text-align: center;
    }

    .tickets-table th:hover {
        background: #e9ecef;
    }

    .tickets-table td {
        padding: 18px 20px;
        border-bottom: 1px solid #f1f3f4;
        font-size: 14px;
        vertical-align: middle;
    }

    .tickets-table tr:hover {
        background: #f8f9fa;
    }

    .ticket-id {
        font-weight: 600;
        color: #ff6b35;
        text-decoration: none;
    }

    .ticket-subject {
        font-weight: 500;
        color: #0A1A28;
        max-width: 300px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-pending { background: #fff3cd; color: #856404; }
    .status-acknowledge { background: #d4edda; color: #155724; }
    .status-endorse { background: #d1ecf1; color: #0c5460; }
    .status-rejected { background: #f8d7da; color: #721c24; }
    .status-closed { background: #e2e3e5; color: #383d41; }
    .status-executed { background: #d4edda; color: #155724; }

    .actions-dropdown {
        position: relative;
        display: inline-block;
    }

    .actions-btn {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        padding: 8px 12px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 12px;
        color: #666;
        transition: all 0.3s ease;
    }

    .actions-btn:hover {
        background: #e9ecef;
        color: #333;
    }

   .actions-menu {
    position: absolute;
    top: 100%;
    right: 0;
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    min-width: 150px;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
}

.actions-menu.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
}

    .actions-menu-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 10px 15px;
        color: #666;
        text-decoration: none;
        cursor: pointer;
        font-size: 10px;
        border: none;
        background: none;
        width: 100%;
        text-align: left;
        transition: all 0.3s ease;
    }

    .actions-menu-item:hover {
        background: #f8f9fa;
        color: #333;
    }

    .actions-menu-item.danger:hover {
        background: #fff5f5;
        color: #dc3545;
    }

    .actions-menu-item i {
        width: 14px;
        font-size: 12px;
    }

    .dropdown-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 999;
        display: none;
    }

    .dropdown-overlay.show {
        display: block;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #666;
    }

    .empty-state i {
        font-size: 64px;
        color: #ddd;
        margin-bottom: 20px;
    }

    .empty-state h3 {
        font-size: 24px;
        margin-bottom: 10px;
        color: #333;
    }

    .empty-state p {
        font-size: 16px;
        margin-bottom: 25px;
    }

    .pagination {
        padding: 20px 25px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-top: 1px solid #E7EAEE;
        background: #f8f9fa;
    }

    .pagination-info {
        font-size: 14px;
        color: #666;
    }

    .pagination-controls {
        display: flex;
        gap: 10px;
    }

    .pagination-btn {
        padding: 8px 12px;
        border: 1px solid #dee2e6;
        background: white;
        color: #666;
        border-radius: 6px;
        cursor: pointer;
        font-size: 12px;
        transition: all 0.3s ease;
    }

    .pagination-btn:hover:not(:disabled) {
        background: #ff6b35;
        color: white;
        border-color: #ff6b35;
    }

    .pagination-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .tickets-container {
            padding: 20px 15px;
        }

        .tickets-toolbar {
            flex-direction: column;
            align-items: stretch;
        }

        .toolbar-left, .toolbar-right {
            justify-content: center;
        }

        .search-box {
            min-width: 100%;
        }

        .tickets-stats {
            grid-template-columns: repeat(2, 1fr);
        }

        .tickets-table-container {
            overflow-x: auto;
            overflow-y: visible;
        }

        .tickets-table {
            min-width: 800px;
        }
    }

    /* Modal Styles */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 2000;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.modal-overlay.show {
    opacity: 1;
    visibility: visible;
}

.modal-content {
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    max-width: 700px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    transform: scale(0.9);
    transition: all 0.3s ease;
}

.modal-overlay.show .modal-content {
    transform: scale(1);
}

.modal-header {
    padding: 20px 25px;
    border-bottom: 1px solid #E7EAEE;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-title {
    font-size: 18px;
    font-weight: 600;
    color: #0A1A28;
    margin: 0;
}

.modal-close {
    background: none;
    border: none;
    font-size: 20px;
    color: #999;
    cursor: pointer;
    padding: 5px;
    line-height: 1;
}

.modal-close:hover {
    color: #666;
}

.modal-body {
    padding: 25px;
}

.form-group {
    margin-bottom: 20px;
}

.form-label {
    display: block;
    font-weight: 600;
    color: #0A1A28;
    font-size: 14px;
    margin-bottom: 8px;
}

.form-label.required::after {
    content: " *";
    color: #dc3545;
}

.form-input, .form-select, .form-textarea {
    width: 100%;
    padding: 12px 15px;
    border: 2px solid #E7EAEE;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.3s ease;
    background: #fff;
    font-family: inherit;
}

.form-input:focus, .form-select:focus, .form-textarea:focus {
    outline: none;
    border-color: #ff6b35;
    box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);
}

.form-textarea {
    resize: vertical;
    min-height: 120px;
}

.form-select {
    cursor: pointer;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 12px center;
    background-repeat: no-repeat;
    background-size: 16px;
    padding-right: 40px;
    appearance: none;
}

.form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
}

.modal-footer {
    padding: 20px 25px;
    border-top: 1px solid #E7EAEE;
    display: flex;
    justify-content: flex-end;
    gap: 15px;
    background: #f8f9fa;
}

.btn {
    padding: 12px 25px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 8px;
}

.btn-secondary {
    background: #6c757d;
    color: white;
}

.btn-secondary:hover {
    background: #5a6268;
    color: white;
    text-decoration: none;
}

.btn-primary {
    background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
    color: white;
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(255, 107, 53, 0.3);
    color: white;
    text-decoration: none;
}

.btn-primary:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none !important;
}

.loading-spinner {
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    width: 14px;
    height: 14px;
    animation: spin 1s linear infinite;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.error-message {
    color: #dc3545;
    font-size: 12px;
    margin-top: 5px;
    display: flex;
    align-items: center;
    gap: 5px;
}

.validation-error {
    border-color: #dc3545 !important;
    box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1) !important;
}

@@media (max-width: 768px) {
    .form-row {
        grid-template-columns: 1fr;
    }
    
    .modal-footer {
        flex-direction: column-reverse;
    }
    
    .btn {
        width: 100%;
        justify-content: center;
    }
}

.expand-btn {
    background: none;
    border: none;
    color: #ff6b35;
    cursor: pointer;
    font-size: 16px;
    padding: 4px;
    border-radius: 4px;
    transition: all 0.3s ease;
}

.expand-btn:hover {
    background: #fff8f5;
}

.expand-btn.expanded {
    transform: rotate(90deg);
}

.ticket-details-row {
    display: none;
}

.ticket-details-row.show {
    display: table-row;
}

.ticket-details-content {
    padding: 20px;
    background: #f8f9fa;
    border-top: 1px solid #E7EAEE;
}

.detail-section {
    margin-bottom: 15px;
}

.detail-label {
    font-weight: 600;
    color: #0A1A28;
    font-size: 12px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 5px;
}

.detail-value {
    color: #666;
    font-size: 14px;
    line-height: 1.5;
}

.detail-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-bottom: 15px;
}

.description-section {
    grid-column: 1 / -1;
}

.type-badge {
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    display: inline-flex;
    align-items: center;
    gap: 5px;
}

.type-badge i {
    font-size: 10px;
}

.type-ticket { 
    background: #e3f2fd; 
    color: #1565c0; 
}

.type-document { 
    background: #f3e5f5; 
    color: #7b1fa2; 
}

.signatories-list {
    margin-top: 8px;
}

.signatory-item-display {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    padding: 12px 15px;
    margin-bottom: 8px;
    font-size: 13px;
}

.signatory-item-display:last-child {
    margin-bottom: 0;
}

.signatory-item-display strong {
    color: #0A1A28;
    font-weight: 600;
}

.status-submenu {
    position: absolute;
    left: 100%;
    top: 0;
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    min-width: 160px;
    z-index: 1001;
    opacity: 0;
    visibility: hidden;
    transform: translateX(-10px);
    transition: all 0.3s ease;
}

.status-submenu.show {
    opacity: 1;
    visibility: visible;
    transform: translateX(0);
}

.actions-menu-item.has-submenu {
    position: relative;
}

.actions-menu-item.has-submenu::after {
    content: "\f054";
    font-family: "Font Awesome 5 Free";
    font-weight: 900;
    margin-left: auto;
    font-size: 10px;
    opacity: 0.6;
}

.status-option {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 15px;
    color: #666;
    cursor: pointer;
    font-size: 13px;
    border: none;
    background: none;
    width: 100%;
    text-align: left;
    transition: all 0.3s ease;
}

.status-option:hover {
    background: #f8f9fa;
    color: #333;
}

.status-change-option i {
    font-size: 20px;
    width: 24px;
    text-align: center;
    border: none !important;    
    outline: none !important;
    box-shadow: none !important;
    background: none !important;
    padding: 0 !important;
}

.status-change-option {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 15px;
    border: 2px solid #E7EAEE;
    border-radius: 8px;
    background: white;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: left;
}

.status-change-option:hover {
    border-color: #ff6b35;
    background: #fff8f5;
}

.status-change-option.selected {
    border-color: #ff6b35;
    background: linear-gradient(135deg, #fff8f5 0%, #fff0e6 100%);
    box-shadow: 0 2px 8px rgba(255, 107, 53, 0.15);
}

.status-change-option i {
    font-size: 20px;
    width: 24px;
    text-align: center;
}

.status-change-option div {
    flex: 1;
}

.status-change-option strong {
    display: block;
    font-size: 14px;
    color: #0A1A28;
    margin-bottom: 2px;
}

.status-change-option small {
    font-size: 12px;
    color: #666;
}

.attachments-list {
    max-height: 400px;
    overflow-y: auto;
}

.attachment-item {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 15px;
    border: 1px solid #E7EAEE;
    border-radius: 8px;
    margin-bottom: 10px;
    background: #f8f9fa;
    transition: all 0.3s ease;
}

.attachment-item:hover {
    background: #e9ecef;
    border-color: #ff6b35;
}

.attachment-icon {
    font-size: 24px;
    width: 40px;
    text-align: center;
    color: #666;
}

.attachment-icon.pdf { color: #dc3545; }
.attachment-icon.word { color: #007bff; }
.attachment-icon.excel { color: #28a745; }
.attachment-icon.powerpoint { color: #fd7e14; }
.attachment-icon.image { color: #6f42c1; }
.attachment-icon.archive { color: #6c757d; }

.attachment-info {
    flex: 1;
}

.attachment-name {
    font-weight: 600;
    color: #0A1A28;
    margin-bottom: 4px;
    word-break: break-all;
}

.attachment-meta {
    font-size: 12px;
    color: #666;
    display: flex;
    gap: 15px;
    flex-wrap: wrap;
}

.attachment-actions {
    display: flex;
    gap: 10px;
}

.download-btn {
    background: #28a745;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 6px;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 5px;
}

.download-btn:hover {
    background: #218838;
    transform: translateY(-1px);
}

.no-attachments {
    text-align: center;
    padding: 40px 20px;
    color: #666;
}

.no-attachments i {
    font-size: 48px;
    color: #ddd;
    margin-bottom: 15px;
}

.attachments-loading {
    text-align: center;
    padding: 40px 20px;
    color: #666;
}

.toast-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    display: flex;
    flex-direction: column;
    gap: 10px;
    pointer-events: none;
}

.toast {
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.15);
    padding: 16px 20px;
    display: flex;
    align-items: center;
    gap: 12px;
    min-width: 300px;
    max-width: 400px;
    transform: translateX(100%);
    transition: all 0.3s ease;
    pointer-events: auto;
    border-left: 4px solid;
}

.toast.show {
    transform: translateX(0);
}

.toast.success {
    border-left-color: #28a745;
}

.toast.error {
    border-left-color: #dc3545;
}

.toast.info {
    border-left-color: #007bff;
}

.toast.warning {
    border-left-color: #ffc107;
}

.toast-icon {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 12px;
    flex-shrink: 0;
}

.toast.success .toast-icon {
    background: #28a745;
}

.toast.error .toast-icon {
    background: #dc3545;
}

.toast.info .toast-icon {
    background: #007bff;
}

.toast.warning .toast-icon {
    background: #ffc107;
}

.toast-content {
    flex: 1;
}

.toast-title {
    font-weight: 600;
    color: #0A1A28;
    font-size: 14px;
    margin: 0 0 2px 0;
}

.toast-message {
    color: #666;
    font-size: 13px;
    margin: 0;
}

.toast-close {
    background: none;
    border: none;
    color: #999;
    cursor: pointer;
    padding: 0;
    font-size: 16px;
    line-height: 1;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.toast-close:hover {
    color: #666;
}

.assignment-info {
    background: #e8f5e8;
    border: 1px solid #c3e6c3;
    border-radius: 6px;
    padding: 12px 15px;
    margin-top: 8px;
    font-size: 13px;
}

.assignment-header {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 8px;
    font-weight: 600;
    color: #155724;
}

.assignment-header i {
    color: #28a745;
}

.assignment-details {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 8px;
    font-size: 12px;
}

.assignment-label {
    font-weight: 600;
    color: #155724;
}

.assignment-value {
    color: #155724;
}

</style>

<div class="tickets-container">
    <!-- Page Header -->
    <div class="page-header">
        <h1 class="page-title">
            <i class="fas fa-ticket-alt"></i>
            All Tickets
        </h1>
        <p class="page-subtitle">Manage and track all request tickets & documents</p>
    </div>

    <!-- Toolbar -->
    <div class="tickets-toolbar">
    <div class="toolbar-left">
        <div class="search-box">
            <input type="text" class="search-input" placeholder="Search requests..." @bind="searchTerm" @oninput="OnSearchChanged" />
            <i class="fas fa-search search-icon"></i>
        </div>
             <select class="filter-dropdown" @bind="typeFilter" @bind:after="OnFilterChanged">
            <option value="">All Types</option>
            <option value="Ticket">Legal Tickets</option>
            <option value="Document">Document Requests</option>
        </select>
        
        <select class="filter-dropdown" @bind="statusFilter" @bind:after="OnFilterChanged">
            <option value="">All Status</option>
            <option value="Pending">Pending </option>
            <option value="Acknowledge">Acknowledge</option>
            <option value="Endorse">Endorse</option>
            <option value="Closed">Closed</option>
            <option value="Reject">Reject</option>
        </select>
    </div>
</div>


    <!-- Stats Cards -->
    <div class="tickets-stats">
    <div class="stat-card total">
        <div class="stat-number">@GetTotalRequests()</div>
        <div class="stat-label">Total Requests</div>
    </div>
    <div class="stat-card pending">
        <div class="stat-number">@GetRequestsByStatus("Pending")</div>
        <div class="stat-label">Pending Requests</div>
    </div>
    <div class="stat-card executed">
        <div class="stat-number">@(GetRequestsByStatus("Executed"))</div>
        <div class="stat-label">Executed Requests</div>
    </div>
    <div class="stat-card rejected">
        <div class="stat-number">@GetRequestsByStatus("Rejected")</div>
        <div class="stat-label">Rejected Requests</div>
    </div>
</div>

    <!-- Tickets Table -->
    <div class="tickets-table-container">
        <div class="table-header">
            <h3 class="table-title">Tickets List</h3>
        </div>

        @if (filteredRequests.Any())
{
    <table class="tickets-table">
        <thead>
            <tr>
                <th class="center" style="width: 40px;"></th>
                <th class="center">Type</th>
                <th class="center">ID</th>
                <th class="center">Status</th>
                <th class="center">Requester</th>
                <th class="center">Company</th>
                <th class="center">Created</th>
                <th class="center">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var request in GetPaginatedRequests())
            {
                <!-- Main request row -->
                <tr>
                    <td class="center">
                        <button class="expand-btn @(expandedTickets.Contains(request.Id) ? "expanded" : "")" 
                                @onclick="() => ToggleRequestDetails(request.Id)">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </td>
                    <td class="center">
                        <span class="type-badge type-@request.Type.ToLower()">
                            @if (request.Type == "Ticket")
                            {
                                <i class="fas fa-ticket-alt"></i>
                                <span>Legal</span>
                            }
                            else
                            {
                                <i class="fas fa-file-alt"></i>
                                <span>Document</span>
                            }
                        </span>
                    </td>
                    <td class="center">
                        <a class="ticket-id">#@request.Id</a>
                    </td>
                    <td class="center">
                        <span class="status-badge status-@request.Status.ToLower()">@request.Status</span>
                    </td>
                    <td class="center">@request.RequesterName</td>
                    <td class="center">@(request.Company ?? "N/A")</td>
                    <td class="center">@request.CreatedDate.ToString("MMM dd, yyyy")</td>
                    <td class="center">
                        <div class="actions-dropdown">
                            <button class="actions-btn" @onclick="() => ToggleActionsMenu(request.Id)" @onclick:stopPropagation="true">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>
                            <div class="actions-menu @(activeDropdown == request.Id ? "show" : "")">
                                <!-- View Attachments  -->
                                <button class="actions-menu-item" @onclick="() => OpenAttachmentsModal(request)" @onclick:stopPropagation="true">
                                    <i class="fas fa-paperclip"></i>
                                    View Attachments
                                </button>
                                <!-- Change Status -->
                                <button class="actions-menu-item" @onclick="() => OpenStatusModal(request)" @onclick:stopPropagation="true">
                                    <i class="fas fa-exchange-alt"></i>
                                    Change Status
                                </button>
                                
                                <!-- Delete action -->
                                <button class="actions-menu-item danger" @onclick="() => DeleteRequest(request)" @onclick:stopPropagation="true">
                                    <i class="fas fa-trash"></i>
                                    Delete
                                </button>
                            </div>
                        </div>
                    </td>
                </tr>

            <!-- Expandable details row -->
            <tr class="ticket-details-row @(expandedTickets.Contains(request.Id) ? "show" : "")">
                <td colspan="10">
                    <div class="ticket-details-content">
                        <div class="detail-grid">
                            @if (request.Type == "Document")
                            {
                                <div class="detail-section">
                                    <div class="detail-label">Document Name</div>
                                    <div class="detail-value">@request.DocumentName</div>
                                </div>
                                <div class="detail-section">
                                    <div class="detail-label">Type</div>
                                    <div class="detail-value">@request.DocumentType</div>
                                </div>
                                <div class="detail-section">
                                    <div class="detail-label">Number of Copies</div>
                                    <div class="detail-value">@request.NumberOfCopies</div>
                                </div>
                            }
                            
                            @if (request.Type == "Ticket")
                            {
                                <div class="detail-section">
                                    <div class="detail-label">Department</div>
                                    <div class="detail-value">@request.Department</div>
                                </div>
                                <div class="detail-section">
                                    <div class="detail-label">Category</div>
                                    <div class="detail-value">@request.Category</div>
                                </div>
                            }
                            
                            <div class="detail-section">
                                <div class="detail-label">Company</div>
                                <div class="detail-value">@(request.Company ?? "N/A")</div>
                            </div>
                            
                            @if (request.Type == "Ticket")
                            {
                                <div class="detail-section">
                                    <div class="detail-label">Location</div>
                                    <div class="detail-value">@(request.Location ?? "N/A")</div>
                                </div>
                            }
                            
                            <div class="detail-section">
                                <div class="detail-label">Requester Email</div>
                                <div class="detail-value">@request.RequesterEmail</div>
                            </div>
                            
                            @if (request.DateNeeded.HasValue)
                            {
                                <div class="detail-section">
                                    <div class="detail-label">Date & Time Needed</div>
                                    <div class="detail-value">
                                        @request.DateNeeded.Value.ToString("MMMM dd, yyyy")
                                        @if (request.TimeNeeded.HasValue)
                                        {
                                            <span> at @request.TimeNeeded.Value.ToString("hh:mm tt")</span>
                                        }
                                    </div>
                                </div>
                            }
                            
                            @if (!string.IsNullOrEmpty(request.AppReferenceNo))
                            {
                                <div class="detail-section">
                                    <div class="detail-label">APP Reference No.</div>
                                    <div class="detail-value">@request.AppReferenceNo</div>
                                </div>
                            }
                            
                            <!-- Description -->
                            <div class="detail-section">
                                <div class="detail-label">@(request.Type == "Document" ? "Particulars/Reason" : "Description")</div>
                                <div class="detail-value">@request.Description</div>
                            </div>
                        </div>

                        <!-- Endorse To: -->
                        @if (request.AssignedToUserId.HasValue && !string.IsNullOrEmpty(request.AssignedToUserName))
                        {
                            <div class="detail-section description-section">
                                <div class="detail-label">Assignment Information</div>
                                <div class="detail-value">
                                    <div class="assignment-info">
                                        <div class="assignment-header">
                                            <i class="fas fa-user-check"></i>
                                            <span>@(request.Status == "Endorse" ? "Endorsed To" : "Assigned To")</span>
                                        </div>
                                        <div class="assignment-details">
                                            <span class="assignment-label">Name:</span>
                                            <span class="assignment-value">@request.AssignedToUserName</span>
                                            
                                            <span class="assignment-label">Email:</span>
                                            <span class="assignment-value">@request.AssignedToUserEmail</span>
                                            
                                            @if (request.AssignedDate.HasValue)
                                            {
                                                <span class="assignment-label">@(request.Status == "Endorse" ? "Endorsed On:" : "Assigned On:")</span>
                                                <span class="assignment-value">@request.AssignedDate.Value.ToString("MMMM dd, yyyy 'at' hh:mm tt")</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        <!-- Signatories Section -->
                        @if (request.Type == "Ticket" && (request.Category == "Contract Review/Preparation" || request.Category == "Secretary's Certificate"))
                        {
                            <div class="detail-section description-section">
                                <div class="detail-label">Authorized Signatories</div>
                                <div class="detail-value">
                                    @if (GetSignatoriesForTicket(request.Id).Any())
                                    {
                                        <div class="signatories-list">
                                            @foreach (var signatory in GetSignatoriesForTicket(request.Id))
                                            {
                                                <div class="signatory-item-display">
                                                    <strong>@signatory.SignatoryName</strong> - @signatory.SignatoryPosition
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <em>No signatories found</em>
                                    }
                                </div>
                            </div>
                        }                       
                    </div>
                </td>
            </tr>
            }
        </tbody>
    </table>

    <!-- Update pagination info -->
    <div class="pagination">
        <div class="pagination-info">
            Showing @((currentPage - 1) * pageSize + 1) to @(Math.Min(currentPage * pageSize, filteredRequests.Count)) of @filteredRequests.Count requests
        </div>
        <div class="pagination-controls">
            <button class="pagination-btn" @onclick="PreviousPage" disabled="@(currentPage <= 1)">
                <i class="fas fa-chevron-left"></i> Previous
            </button>
            <button class="pagination-btn" @onclick="NextPage" disabled="@(currentPage >= GetTotalPages())">
                Next <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>
}
else
{
    <div class="empty-state">
        <i class="fas fa-inbox"></i>
        <h3>No Requests Found</h3>
        <p>@(string.IsNullOrEmpty(searchTerm) ? "There are no requests to display." : "No requests match your search criteria.")</p>
    </div>
}
    </div>
</div>

<div class="dropdown-overlay @(activeDropdown != 0 ? "show" : "")" @onclick="CloseActionsMenu" @onclick:stopPropagation="true"></div>
<div class="modal-overlay @(showStatusModal ? "show" : "")" @onclick="CloseStatusModal">
    <div class="modal-content" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h3 class="modal-title">Change Request Status</h3>
            <button class="modal-close" @onclick="CloseStatusModal">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="modal-body">
            @if (selectedRequest != null)
            {
                <div class="form-group">
                    <label class="form-label">Request Details</label>
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                        <strong>@selectedRequest.Type #@selectedRequest.Id</strong><br>
                        <span style="color: #666;">@selectedRequest.Subject</span><br>
                        <small style="color: #999;">Current Status: <span class="status-badge status-@selectedRequest.Status.ToLower()">@selectedRequest.Status</span></small>
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label required">New Status</label>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                        <button class="status-change-option @(selectedStatus == "Acknowledge" ? "selected" : "")" 
                                @onclick="@(() => SelectStatus("Acknowledge"))">
                            <i class="fas fa-check-circle status-acknowledge"></i>
                            <div>
                                <strong>Acknowledge</strong>
                                <small>Confirm receipt and review</small>
                            </div>
                        </button>
                        
                        <button class="status-change-option @(selectedStatus == "Endorse" ? "selected" : "")" 
                                @onclick="@(() => SelectStatus("Endorse"))">
                            <i class="fas fa-thumbs-up status-endorse"></i>
                            <div>
                                <strong>Endorse</strong>
                                <small>Approve and forward</small>
                            </div>
                        </button>
                        
                        <button class="status-change-option @(selectedStatus == "Closed" ? "selected" : "")" 
                                @onclick="@(() => SelectStatus("Closed"))">
                            <i class="fas fa-times-circle status-closed"></i>
                            <div>
                                <strong>Closed</strong>
                                <small>Mark as completed</small>
                            </div>
                        </button>
                        
                        <button class="status-change-option @(selectedStatus == "Executed" ? "selected" : "")" 
                                @onclick="@(() => SelectStatus("Executed"))">
                            <i class="fas fa-check-double status-executed"></i>
                            <div>
                                <strong>Executed</strong>
                                <small>Successfully processed</small>
                            </div>
                        </button>

                        <button class="status-change-option @(selectedStatus == "Rejected" ? "selected" : "")" 
                                @onclick="@(() => SelectStatus("Rejected"))">
                            <i class="fas fa-thumbs-down status-rejected"></i>
                            <div>
                                <strong>Rejected</strong>
                                <small>Mark as rejected</small>
                            </div>
                        </button>
                    </div>
                </div>

                @if (selectedStatus == "Endorse")
                {
                    <div class="form-group">
                        <label class="form-label required">Endorse to Legal Counsel</label>
                        @if (isLoadingUsers)
                        {
                            <div style="text-align: center; padding: 20px; color: #666;">
                                <div class="loading-spinner" style="width: 20px; height: 20px; margin: 0 auto 10px;"></div>
                                Loading available Legal Counsels...
                            </div>
                        }
                        else if (availableUsers.Any())
                        {
                            <select class="form-select" @bind="selectedUserId">
                                <option value="">Select Legal Counsel</option>
                                @foreach (var user in availableUsers)
                                {
                                    <option value="@user.Id">
                                        @user.Name - @user.Department (@user.Email)
                                    </option>
                                }
                            </select>
                            @if (availableUsers.Count == 0)
                            {
                                <small style="color: #dc3545; margin-top: 5px; display: block;">
                                    <i class="fas fa-exclamation-circle"></i>
                                    No active Legal Counsels found
                                </small>
                            }
                        }
                        else
                        {
                            <div style="text-align: center; padding: 20px; color: #666;">
                                <i class="fas fa-users" style="font-size: 24px; margin-bottom: 10px; opacity: 0.5;"></i>
                                <p>No Legal Counsels available</p>
                            </div>
                        }
                    </div>
                }
            }
        </div>
        
        <div class="modal-footer">
            <button class="btn btn-secondary" @onclick="CloseStatusModal" disabled="@isStatusChanging">
                Cancel
            </button>
            <button class="btn btn-primary" @onclick="ConfirmStatusChange" 
                    disabled="@(string.IsNullOrEmpty(selectedStatus) || isStatusChanging || (selectedStatus == "Endorse" && !selectedUserId.HasValue))">
                @if (isStatusChanging)
                {
                    <div class="loading-spinner"></div>
                }
                @if (selectedStatus == "Endorse")
                {
                    <span>Endorse Request</span>
                }
                else
                {
                    <span>Change Status</span>
                }
            </button>
        </div>
    </div>
</div>

<!-- Attachments Modal -->
<div class="modal-overlay @(showAttachmentsModal ? "show" : "")" @onclick="CloseAttachmentsModal">
    <div class="modal-content" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h3 class="modal-title">
                <i class="fas fa-paperclip"></i>
                Attachments - @(selectedRequestForAttachments?.Type) #@(selectedRequestForAttachments?.Id)
            </h3>
            <button class="modal-close" @onclick="CloseAttachmentsModal">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="modal-body">
            @if (selectedRequestForAttachments != null)
            {
                
                @if (isLoadingAttachments)
                {
                    <div class="attachments-loading">
                        <div class="loading-spinner" style="width: 40px; height: 40px; margin: 0 auto 15px;"></div>
                        <p>Loading attachments...</p>
                    </div>
                }
                else if (currentAttachments.Any())
                {
                    <div class="form-group">
                        <label class="form-label">Attachments (@currentAttachments.Count)</label>
                        <div class="attachments-list">
                            @foreach (var attachment in currentAttachments)
                            {
                                <div class="attachment-item">
                                    <div class="attachment-icon @GetFileIcon(attachment.ContentType).Replace("fas fa-file-", "")">
                                        <i class="@GetFileIcon(attachment.ContentType)"></i>
                                    </div>
                                    
                                    <div class="attachment-info">
                                        <div class="attachment-name">@attachment.FileName</div>
                                        <div class="attachment-meta">
                                            <span><i class="fas fa-weight"></i> @FormatFileSize(attachment.FileSize)</span>
                                            <span><i class="fas fa-calendar"></i> @attachment.UploadedDate.ToString("MMM dd, yyyy")</span>
                                        </div>
                                    </div>
                                    
                                    <div class="attachment-actions">
                                        <button class="download-btn" @onclick="() => DownloadAttachment(attachment)">
                                            <i class="fas fa-download"></i>
                                            Download
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="no-attachments">
                        <i class="fas fa-paperclip"></i>
                        <h4>No Attachments</h4>
                        <p>This @(selectedRequestForAttachments.Type.ToLower()) doesn't have any attachments yet.</p>
                    </div>
                }
            }
        </div>
        
        <div class="modal-footer">
            <button class="btn btn-secondary" @onclick="CloseAttachmentsModal">
                Close
            </button>
        </div>
    </div>

    <!-- Toast Container -->
<div class="toast-container">
    @foreach (var toast in toasts)
    {
        <div class="toast @toast.Type @(toast.IsVisible ? "show" : "")">
            <div class="toast-icon">
                @if (toast.Type == "success")
                {
                    <i class="fas fa-check"></i>
                }
                else if (toast.Type == "error")
                {
                    <i class="fas fa-times"></i>
                }
                else if (toast.Type == "info")
                {
                    <i class="fas fa-info"></i>
                }
                else if (toast.Type == "warning")
                {
                    <i class="fas fa-exclamation"></i>
                }
            </div>
            <div class="toast-content">
                <div class="toast-title">@toast.Title</div>
                <div class="toast-message">@toast.Message</div>
            </div>
            <button class="toast-close" @onclick="() => RemoveToast(toast.Id)">
                <i class="fas fa-times"></i>
            </button>
        </div>
    }
</div>

</div>

@code {
    private List<ToastNotification> toasts = new List<ToastNotification>();
    private int toastIdCounter = 0;
    private List<User> availableUsers = new List<User>();
    private int? selectedUserId = null;
    private bool isLoadingUsers = false;
    private bool showAttachmentsModal = false;
    private UnifiedRequestModel? selectedRequestForAttachments = null;
    private List<AttachmentModel> currentAttachments = new List<AttachmentModel>();
    private bool isLoadingAttachments = false;
    private bool showStatusModal = false;
    private UnifiedRequestModel? selectedRequest = null;
    private string selectedStatus = "";
    private string statusChangeComment = "";
    private bool isStatusChanging = false;

    private int activeStatusSubmenu = 0;
    private Dictionary<int, List<TicketSignatory>> ticketSignatories = new Dictionary<int, List<TicketSignatory>>();
    private List<UnifiedRequestModel> allRequests = new List<UnifiedRequestModel>();
    private List<UnifiedRequestModel> filteredRequests = new List<UnifiedRequestModel>();
    
    private List<TicketSignatory> GetSignatoriesForTicket(int ticketId)
    {
        return ticketSignatories.ContainsKey(ticketId) ? ticketSignatories[ticketId] : new List<TicketSignatory>();
    }
    
    private string searchTerm = "";
    private string statusFilter = "";
    private string priorityFilter = "";
    private string typeFilter = "";
    private string sortColumn = "CreatedDate";
    private string sortDirection = "desc";
    
    private int currentPage = 1;
    private int pageSize = 10;
    private int activeDropdown = 0;
    private bool showEditModal = false;
    private bool isEditSubmitting = false;
    private HashSet<int> expandedTickets = new HashSet<int>();

        private void OpenStatusModal(UnifiedRequestModel request)
    {
        CloseActionsMenu();
        selectedRequest = request;
        selectedStatus = "";
        statusChangeComment = "";
        showStatusModal = true;
        StateHasChanged();
    }

    private void CloseStatusModal()
    {
        showStatusModal = false;
        selectedRequest = null;
        selectedStatus = "";
        selectedUserId = null;
        availableUsers.Clear();
        statusChangeComment = "";
        isStatusChanging = false;
        StateHasChanged();
    }

    private async Task SelectStatus(string status)
    {
        selectedStatus = status;
        
        if (status == "Endorse")
        {
            await LoadAvailableUsersAsync();
        }
        else
        {
            selectedUserId = null;
        }
        
        StateHasChanged();
    }

    private async Task LoadAvailableUsersAsync()
    {
        try
        {
            isLoadingUsers = true;
            StateHasChanged();

            availableUsers = await UserService.GetUsersByRoleAsync("legalcounsel");
            
            availableUsers = availableUsers.Where(u => u.Status == "Active").ToList();

            if (!availableUsers.Any())
            {
                await ShowToast("No Legal Counsels", "No active Legal Counsels found in the system.", "warning");
            }
        }
        catch (Exception ex)
        {
            await ShowToast("Error", $"Error loading users: {ex.Message}", "error");
        }
        finally
        {
            isLoadingUsers = false;
            StateHasChanged();
        }
    }


    private async Task ShowToast(string title, string message, string type = "success")
    {
        var toast = new ToastNotification
        {
            Id = ++toastIdCounter,
            Title = title,
            Message = message,
            Type = type,
            IsVisible = false
        };

        toasts.Add(toast);
        StateHasChanged();

        await Task.Delay(100);
        toast.IsVisible = true;
        StateHasChanged();

        _ = Task.Delay(4000).ContinueWith(async _ =>
        {
            await InvokeAsync(() =>
            {
                RemoveToast(toast.Id);
            });
        });
    }

    private void RemoveToast(int toastId)
    {
        var toast = toasts.FirstOrDefault(t => t.Id == toastId);
        if (toast != null)
        {
            toast.IsVisible = false;
            StateHasChanged();

            Task.Delay(300).ContinueWith(_ =>
            {
                InvokeAsync(() =>
                {
                    toasts.Remove(toast);
                    StateHasChanged();
                });
            });
        }
    }
    
    private async Task ConfirmStatusChange()
    {
        if (selectedRequest == null || string.IsNullOrEmpty(selectedStatus))
            return;

        if (selectedStatus == "Endorse" && !selectedUserId.HasValue)
        {
            await ShowToast("Validation Error", "Please select a Legal Counsel to endorse to.", "error");
            return;
        }

        isStatusChanging = true;
        StateHasChanged();

        try
        {
            bool updated = false;
            if (selectedRequest.Type == "Ticket")
            {
                var updatedTicket = await TicketService.ChangeTicketStatusAsync(selectedRequest.Id, selectedStatus);
                
                if (selectedStatus == "Endorse" && selectedUserId.HasValue)
                {
                    await TicketService.AssignTicketAsync(selectedRequest.Id, selectedUserId.Value);
                }
                
                updated = updatedTicket != null;
            }
            else
            {
                await ShowToast("Not Implemented", "Status change for document requests is not yet implemented.", "warning");
                return;
            }

            if (updated)
            {
                await LoadAllRequestsAsync();
                CloseStatusModal();
                
                var endorseMessage = selectedStatus == "Endorse" && selectedUserId.HasValue 
                    ? $" and assigned to {availableUsers.FirstOrDefault(u => u.Id == selectedUserId.Value)?.Name}"
                    : "";
                    
                await ShowToast("Status Changed", $"Status changed to '{selectedStatus}'{endorseMessage} successfully!", "success");
            }
            else
            {
                await ShowToast("Update Failed", "Failed to update status. Please try again.", "error");
            }
        }
        catch (Exception ex)
        {
            await ShowToast("Error", $"Error changing status: {ex.Message}", "error");
        }
        finally
        {
            isStatusChanging = false;
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadAllRequestsAsync();
    }

    private async Task LoadAllRequestsAsync()
{
    try
    {
        var unifiedList = new List<UnifiedRequestModel>();
        var tickets = await TicketService.GetAllTicketsAsync();
        
        foreach (var ticket in tickets)
        {     
            try
            {
                var signatories = await TicketService.GetTicketSignatoriesAsync(ticket.Id);
                ticketSignatories[ticket.Id] = signatories;
                
                string? assignedUserName = null;
                string? assignedUserEmail = null;
                DateTime? assignedDate = null;
                
                if (ticket.AssignedToUserId.HasValue)
                {
                    try
                    {
                        var assignedUser = await UserService.GetUserByIdAsync(ticket.AssignedToUserId.Value);
                        if (assignedUser != null)
                        {
                            assignedUserName = assignedUser.Name;
                            assignedUserEmail = assignedUser.Email;
                            assignedDate = ticket.ModifiedDate;
                        }
                    }
                    catch
                    {
        
                    }
                }
                
                var ticketRequest = new UnifiedRequestModel
                {
                    Id = ticket.Id,
                    Type = "Ticket",
                    Subject = ticket.Subject ?? $"Legal Ticket #{ticket.Id}",
                    RequesterName = ticket.RequesterName ?? "Unknown User",
                    RequesterEmail = ticket.RequesterEmail ?? "unknown@company.com", 
                    Status = ticket.Status ?? "Pending",
                    Department = ticket.Department ?? "Legal",
                    Category = ticket.Category ?? "Legal Request",
                    CreatedDate = ticket.CreatedDate,
                    Description = ticket.Description ?? "No description",            
                    Company = ticket.Company ?? "N/A",
                    Location = ticket.Location ?? "N/A",
                    DateNeeded = ticket.DateNeeded,
                    TimeNeeded = ticket.TimeNeeded,
                    AppReferenceNo = ticket.AppReferenceNo,
                    RequestDate = ticket.RequestDate,
                    AssignedToUserId = ticket.AssignedToUserId,
                    AssignedToUserName = assignedUserName,
                    AssignedToUserEmail = assignedUserEmail,
                    AssignedDate = assignedDate,
                    DocumentName = null,
                    DocumentType = null,
                    NumberOfCopies = null
                };
                
                unifiedList.Add(ticketRequest);
               
            }
            catch
            {
                
            }
        }
        
        var ticketCount = unifiedList.Count(r => r.Type == "Ticket");
        var documentRequests = await DocumentRequestService.GetAllDocumentRequestsAsync();
        
        foreach (var docReq in documentRequests)
        {
            var subject = $"Document Request #{docReq.Id} - {docReq.Company}";
            var firstDocItem = docReq.DocumentItems?.FirstOrDefault();
            
            unifiedList.Add(new UnifiedRequestModel
            {
                Id = docReq.Id,
                Type = "Document",
                Subject = subject,
                RequesterName = docReq.RequesterName ?? "Unknown User",
                RequesterEmail = docReq.RequesterEmail ?? "unknown@company.com",
                Status = docReq.Status ?? "Pending",
                Department = "Legal",
                Category = "Document Request",
                CreatedDate = docReq.CreatedDate,
                Description = docReq.Particulars ?? "No particulars provided",
                Company = docReq.Company ?? "Unknown Company",
                DateNeeded = docReq.DateNeeded,
                TimeNeeded = docReq.TimeNeeded,
                DocumentName = firstDocItem?.DocumentName ?? "N/A",
                DocumentType = firstDocItem?.Type ?? "N/A",
                NumberOfCopies = firstDocItem?.NumberOfCopies ?? 0,
                AssignedToUserId = null,
                AssignedToUserName = null,
                AssignedToUserEmail = null,
                AssignedDate = null
            });
        }
        
        var finalTicketCount = unifiedList.Count(r => r.Type == "Ticket");
        var finalDocumentCount = unifiedList.Count(r => r.Type == "Document");
        
        allRequests = unifiedList;
        filteredRequests = allRequests.ToList();
        
        await InvokeAsync(StateHasChanged);
    }
    catch
    {
        allRequests = new List<UnifiedRequestModel>();
        filteredRequests = new List<UnifiedRequestModel>();
    }
}

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        currentPage = 1;
        FilterAndSortRequests();
    }

    private void OnFilterChanged()
    {
        currentPage = 1;
        FilterAndSortRequests();
    }

    private void FilterAndSortRequests()
    {
        var query = allRequests.AsQueryable();

        if (!string.IsNullOrEmpty(searchTerm))
        {
            query = query.Where(r => r.Subject.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        r.RequesterName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        r.RequesterEmail.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        r.Id.ToString().Contains(searchTerm) ||
                        (r.Company != null && r.Company.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));
        }

        if (!string.IsNullOrEmpty(typeFilter))
        {
            query = query.Where(r => r.Type == typeFilter);
        }

        if (!string.IsNullOrEmpty(statusFilter))
        {
            query = query.Where(r => r.Status == statusFilter);
        }

        if (!string.IsNullOrEmpty(priorityFilter))
        {
            query = query.Where(r => r.Priority == priorityFilter);
        }

        query = sortColumn switch
        {
            "Id" => sortDirection == "asc" ? query.OrderBy(r => r.Id) : query.OrderByDescending(r => r.Id),
            "Type" => sortDirection == "asc" ? query.OrderBy(r => r.Type) : query.OrderByDescending(r => r.Type),
            "Subject" => sortDirection == "asc" ? query.OrderBy(r => r.Subject) : query.OrderByDescending(r => r.Subject),
            "Status" => sortDirection == "asc" ? query.OrderBy(r => r.Status) : query.OrderByDescending(r => r.Status),
            "Priority" => sortDirection == "asc" ? query.OrderBy(r => r.Priority) : query.OrderByDescending(r => r.Priority),
            "Requester" => sortDirection == "asc" ? query.OrderBy(r => r.RequesterName) : query.OrderByDescending(r => r.RequesterName),
            "CreatedDate" => sortDirection == "asc" ? query.OrderBy(r => r.CreatedDate) : query.OrderByDescending(r => r.CreatedDate),
            _ => query.OrderByDescending(r => r.CreatedDate)
        };

        filteredRequests = query.ToList();
    }

    private void FilterAndSortTickets()
    {
        FilterAndSortRequests();
    }

    private List<UnifiedRequestModel> GetPaginatedRequests()
    {
        return filteredRequests
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private int GetTotalPages()
    {
        return (int)Math.Ceiling((double)filteredRequests.Count / pageSize);
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (currentPage < GetTotalPages())
        {
            currentPage++;
        }
    }

    // Statistics
    private int GetTotalRequests() => allRequests.Count;
    private int GetRequestsByStatus(string status) => allRequests.Count(r => r.Status == status);
    private int GetRequestsByType(string type) => allRequests.Count(r => r.Type == type);

    private void ToggleRequestDetails(int requestId)
    {
        if (expandedTickets.Contains(requestId))
        {
            expandedTickets.Remove(requestId);
        }
        else
        {
            expandedTickets.Add(requestId);
        }
        StateHasChanged();
    }

    private void ToggleActionsMenu(int requestId)
    {
        activeDropdown = activeDropdown == requestId ? 0 : requestId;
        StateHasChanged();
    }

    private void ShowStatusSubmenu(int requestId)
    {
        activeStatusSubmenu = requestId;
        StateHasChanged();
    }

    private void HideStatusSubmenu(int requestId)
    {
        activeStatusSubmenu = 0;
        StateHasChanged();
    }

    private async Task ChangeRequestStatus(UnifiedRequestModel request, string newStatus)
    {
        CloseActionsMenu();
        
        try
        {
            bool updated = false;
            if (request.Type == "Ticket")
            {
                var updatedTicket = await TicketService.ChangeTicketStatusAsync(request.Id, newStatus);
                updated = updatedTicket != null;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Status change for document requests is not yet implemented.");
                return;
            }
            
            if (updated)
            {
                await LoadAllRequestsAsync();
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("alert", $"Status changed to '{newStatus}' successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to update status.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error changing status: {ex.Message}");
        }
    }

    private void CloseActionsMenu()
    {
        activeDropdown = 0;
        activeStatusSubmenu = 0;
        StateHasChanged();
    }

    private void ViewRequest(UnifiedRequestModel request)
    {
        CloseActionsMenu();
        if (request.Type == "Ticket")
        {
            Navigation.NavigateTo($"/tickets/details/{request.Id}");
        }
        else
        {
            Navigation.NavigateTo($"/documents/details/{request.Id}");
        }
    }

    private async Task DeleteRequest(UnifiedRequestModel request)
    {
        CloseActionsMenu();
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete this {request.Type.ToLower()} #{request.Id}?");
        
        if (confirmed)
        {
            try
            {
                bool deleted = false;
                if (request.Type == "Ticket")
                {
                    deleted = await TicketService.DeleteTicketAsync(request.Id);
                }
                else
                {
                    deleted = await DocumentRequestService.DeleteDocumentRequestAsync(request.Id);
                }
                
                if (deleted)
                {
                    await LoadAllRequestsAsync();
                    StateHasChanged();
                    await ShowToast("Deleted Successfully", $"{request.Type} #{request.Id} has been deleted.", "success");
                }
                else
                {
                    await ShowToast("Delete Failed", $"Failed to delete {request.Type.ToLower()}. Please try again.", "error");
                }
            }
            catch (Exception ex)
            {
                await ShowToast("Error", $"Error deleting request: {ex.Message}", "error");
            }
        }
    }

    private async Task CloseTicket(int ticketId)
    {
        CloseActionsMenu();
        try
        {
            var updatedTicket = await TicketService.ChangeTicketStatusAsync(ticketId, "Closed");
            if (updatedTicket != null)
            {
                await LoadAllRequestsAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error closing ticket: {ex.Message}");
        }
    }

    private async Task ReopenTicket(int ticketId)
    {
        CloseActionsMenu();
        try
        {
            var updatedTicket = await TicketService.ChangeTicketStatusAsync(ticketId, "Open");
            if (updatedTicket != null)
            {
                await LoadAllRequestsAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error reopening ticket: {ex.Message}");
        }
    }

private async Task OpenAttachmentsModal(UnifiedRequestModel request)
{
    CloseActionsMenu();
    selectedRequestForAttachments = request;
    showAttachmentsModal = true;
    
    await LoadAttachmentsAsync(request);
    StateHasChanged();
}

private void CloseAttachmentsModal()
{
    showAttachmentsModal = false;
    selectedRequestForAttachments = null;
    currentAttachments.Clear();
    StateHasChanged();
}

private async Task DownloadAttachment(AttachmentModel attachment)
    {
        try
        {
            byte[] fileBytes;
            
            if (selectedRequestForAttachments?.Type == "Ticket")
            {
                fileBytes = await TicketService.DownloadAttachmentAsync(attachment.Id);
            }
            else
            {
                fileBytes = await DocumentRequestService.DownloadAttachmentAsync(attachment.Id);
            }
        
            var base64 = Convert.ToBase64String(fileBytes);
            await JSRuntime.InvokeVoidAsync("downloadFile", attachment.FileName, base64, attachment.ContentType);
            
            await ShowToast("Download Started", $"'{attachment.FileName}' download has started.", "success");
        }
        catch (Exception ex)
        {
            await ShowToast("Download Failed", $"Error downloading file: {ex.Message}", "error");
        }
    }

private async Task LoadAttachmentsAsync(UnifiedRequestModel request)
    {
        try
        {
            isLoadingAttachments = true;
            currentAttachments.Clear();
            
            if (request.Type == "Ticket")
            {
                var ticketAttachments = await TicketService.GetTicketAttachmentsAsync(request.Id);
                currentAttachments = ticketAttachments.Select(a => new AttachmentModel
                {
                    Id = a.Id,
                    FileName = a.FileName,
                    FilePath = a.FilePath,
                    ContentType = a.ContentType,
                    FileSize = a.FileSize,
                    UploadedDate = a.UploadedDate,
                    UploadedBy = a.UploadedByUser?.Name ?? "System User"
                }).ToList();
            }
            else
            {
                var docAttachments = await DocumentRequestService.GetDocumentRequestAttachmentsAsync(request.Id);
                currentAttachments = docAttachments.Select(a => new AttachmentModel
                {
                    Id = a.Id,
                    FileName = a.FileName,
                    FilePath = a.FilePath,
                    ContentType = a.ContentType,
                    FileSize = a.FileSize,
                    UploadedDate = a.UploadedDate,
                    UploadedBy = a.UploadedByUser?.Name ?? "System User"
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            await ShowToast("Error", $"Error loading attachments: {ex.Message}", "error");
        }
        finally
        {
            isLoadingAttachments = false;
            StateHasChanged();
        }
    }

private string FormatFileSize(long bytes)
{
    string[] sizes = { "B", "KB", "MB", "GB" };
    double len = bytes;
    int order = 0;
    while (len >= 1024 && order < sizes.Length - 1)
    {
        order++;
        len = len / 1024;
    }
    return $"{len:0.##} {sizes[order]}";
}

private string GetFileIcon(string contentType)
{
    return contentType.ToLower() switch
    {
        var ct when ct.Contains("pdf") => "fas fa-file-pdf",
        var ct when ct.Contains("word") => "fas fa-file-word",
        var ct when ct.Contains("excel") || ct.Contains("spreadsheet") => "fas fa-file-excel",
        var ct when ct.Contains("powerpoint") || ct.Contains("presentation") => "fas fa-file-powerpoint",
        var ct when ct.Contains("image") => "fas fa-file-image",
        var ct when ct.Contains("video") => "fas fa-file-video",
        var ct when ct.Contains("audio") => "fas fa-file-audio",
        var ct when ct.Contains("text") => "fas fa-file-alt",
        var ct when ct.Contains("zip") || ct.Contains("rar") || ct.Contains("archive") => "fas fa-file-archive",
        _ => "fas fa-file"
    };
}

public class ToastNotification
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Message { get; set; } = "";
        public string Type { get; set; } = "success";
        public bool IsVisible { get; set; } = false;
    }


public class AttachmentModel
{
    public int Id { get; set; }
    public string FileName { get; set; } = "";
    public string FilePath { get; set; } = "";
    public string ContentType { get; set; } = "";
    public long FileSize { get; set; }
    public DateTime UploadedDate { get; set; }
    public string UploadedBy { get; set; } = "";
}

    public class UnifiedRequestModel
    {
        public int Id { get; set; }
        public string Type { get; set; } = "";
        public string Subject { get; set; } = "";
        public string RequesterName { get; set; } = "";
        public string RequesterEmail { get; set; } = "";
        public string Status { get; set; } = "";
        public string Priority { get; set; } = "";
        public string Department { get; set; } = "";
        public string Category { get; set; } = "";
        public DateTime CreatedDate { get; set; }
        public string Description { get; set; } = "";
        public string? Company { get; set; }
        public string? Location { get; set; }
        public DateTime? DateNeeded { get; set; }
        public TimeOnly? TimeNeeded { get; set; }
        public string? AppReferenceNo { get; set; }
        public DateTime? RequestDate { get; set; }
        public string? DocumentName { get; set; }
        public string? DocumentType { get; set; }
        public int? NumberOfCopies { get; set; }
        public int? AssignedToUserId { get; set; }
        public string? AssignedToUserName { get; set; }
        public string? AssignedToUserEmail { get; set; }
        public DateTime? AssignedDate { get; set; }
    }
}