@inject NavigationManager Navigation
@inject HelpdeskBlazor.Services.ISessionService SessionService
@inject HelpdeskBlazor.Services.IAuthorizationService AuthorizationService

<style>
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        width: 250px;
        background: #fff;
        border-right: 1px solid #E7EAEE;
        box-shadow: 2px 0 8px rgba(0, 0, 0, 0.05);
        z-index: 999;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
    }

    .sidebar-header {
        padding: 20px 25px 25px;
        border-bottom: 1px solid #E7EAEE;
        text-align: center;
        flex-shrink: 0;
    }

    .sidebar-logo img {
        height: 45px;
        width: auto;
        margin-bottom: 15px;
    }

    .sidebar-title {
        font-size: 15px;
        font-weight: 600;
        color: #0A1A28;
        margin: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .sidebar-title i {
        color: #ff6b35;
        font-size: 14px;
    }

    .sidebar-nav {
        padding: 20px 0;
        flex: 1;
        overflow-y: auto;
    }

    .nav-list {
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .nav-item {
        margin-bottom: 5px;
    }

    .nav-link {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px 25px;
        color: #666;
        text-decoration: none;
        transition: all 0.3s ease;
        font-size: 14px;
        font-weight: 500;
        border-right: 3px solid transparent;
    }

    .nav-link:hover {
        background: #f8f9fa;
        color: #ff6b35;
        text-decoration: none;
    }

    .nav-link.active {
        background: linear-gradient(90deg, rgba(255, 107, 53, 0.1) 0%, rgba(247, 147, 30, 0.05) 100%);
        color: #ff6b35;
        border-right-color: #ff6b35;
        font-weight: 600;
    }

    .nav-link i {
        width: 18px;
        text-align: center;
        font-size: 16px;
    }

    .nav-section {
        margin-top: 30px;
        padding: 0 25px;
    }

    .nav-section-title {
        font-size: 11px;
        font-weight: 600;
        color: #999;
        text-transform: uppercase;
        letter-spacing: 1px;
        margin-bottom: 15px;
    }

    /* Logout Section */
    .sidebar-footer {
        flex-shrink: 0;
        border-top: 1px solid #E7EAEE;
        padding: 20px 0;
        background: #fafbfc;
    }

    .logout-button {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px 25px;
        margin: 0 20px;
        color: #dc3545;
        text-decoration: none;
        transition: all 0.3s ease;
        font-size: 14px;
        font-weight: 500;
        border: 1px solid #dc3545;
        border-radius: 6px;
        background: transparent;
        cursor: pointer;
        justify-content: center;
        width: calc(100% - 40px);
    }

    .logout-button:hover {
        background: #dc3545;
        color: white;
        text-decoration: none;
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(220, 53, 69, 0.2);
    }

    .logout-button i {
        width: 18px;
        text-align: center;
        font-size: 16px;
    }

    .logout-link {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px 25px;
        color: #999;
        text-decoration: none;
        transition: all 0.3s ease;
        font-size: 14px;
        font-weight: 500;
        border-right: 3px solid transparent;
    }

    .logout-link:hover {
        background: #fff5f5;
        color: #dc3545;
        text-decoration: none;
    }

    .logout-link i {
        width: 18px;
        text-align: center;
        font-size: 16px;
    }

    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .sidebar {
            transform: translateX(-100%);
            transition: transform 0.3s ease;
        }

        .sidebar.open {
            transform: translateX(0);
        }
    }
</style>

<div class="sidebar">
    <!-- Header section with logo and title -->
    <div class="sidebar-header">
        <div class="sidebar-logo">
            <img src="@GetLogoPath()" alt="@GetCompanyName()" />
        </div>
        <h2 class="sidebar-title">
            <i class="fas fa-headset"></i>
            Legal Helpdesk System
        </h2>
    </div>

    <!-- Main navigation -->
    @if (SessionService.IsAuthenticated && SessionService.CurrentUser != null)
    {
        <nav class="sidebar-nav">
            <ul class="nav-list">
                @if (AuthorizationService.CanAccessAllTickets(SessionService.CurrentUser))
                {
                    <li class="nav-item">
                        <a href="/tickets" class="nav-link @(IsActive("/tickets") ? "active" : "")">
                            <i class="fas fa-ticket-alt"></i>
                            <span>All Tickets</span>
                        </a>
                    </li>
                }
                @if (AuthorizationService.CanCreateRequests(SessionService.CurrentUser))
                {
                    <li class="nav-item">
                        <a href="/create" class="nav-link @(IsActive("/create") ? "active" : "")">
                            <i class="fas fa-plus"></i>
                            <span>Create Request</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/drafts" class="nav-link @(IsActive("/drafts") ? "active" : "")">
                            <i class="fas fa-edit"></i>
                            <span>My Drafts</span>
                        </a>
                    </li>
                }
            </ul>

            @if (AuthorizationService.CanAccessUsers(SessionService.CurrentUser))
            {
                <div class="nav-section">
                    <div class="nav-section-title">Administration</div>
                    <ul class="nav-list">
                        <li class="nav-item">
                            <a href="/users" class="nav-link @(IsActive("/users") ? "active" : "")">
                                <i class="fas fa-users"></i>
                                <span>Users</span>
                            </a>
                        </li>
                    </ul>
                </div>
            }
        </nav>
    }

    <!-- Logout section -->
    <div class="sidebar-footer">
        <button class="logout-button" @onclick="HandleLogout">
            <i class="fas fa-sign-out-alt"></i>
            <span>Logout</span>
        </button>
    </div>
</div>

@implements IDisposable

@code {
    private string currentPath = "";

    private string GetLogoPath()
    {
        if (SessionService.IsAuthenticated && SessionService.CurrentUser != null)
        {
            var userDomain = SessionService.CurrentUser.Domain?.ToUpper();

            return userDomain switch
            {
                "SCPC" => "scpc.png",
                "SLPGC" => "slpgc.png",
                "SMPC" => "semirara.png",
                _ => "semirara.png"
            };
        }

        return "semirara.png";
    }

    private string GetCompanyName()
    {
        if (SessionService.IsAuthenticated && SessionService.CurrentUser != null)
        {
            var userDomain = SessionService.CurrentUser.Domain?.ToUpper();

            return userDomain switch
            {
                "SCPC" => "SCPC",
                "SLPGC" => "SLPGC",
                "SMPC" => "Semirara Mining",
                _ => "Semirara Mining"
            };
        }

        return "Semirara Mining";
    }



    protected override void OnInitialized()
    {
        currentPath = Navigation.Uri;
        Navigation.LocationChanged += OnLocationChanged;
        SessionService.OnUserChanged += OnUserChanged;
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        currentPath = e.Location;
        StateHasChanged();
    }

    private async void OnUserChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private bool IsActive(string path)
    {
        if (path == "/create" && (currentPath.EndsWith("/create", StringComparison.OrdinalIgnoreCase) ||
        currentPath.EndsWith("/tickets/create", StringComparison.OrdinalIgnoreCase)))
        {
            return true;
        }
        return currentPath.EndsWith(path, StringComparison.OrdinalIgnoreCase);
    }

    private async Task HandleLogout()
    {
        try
        {
            SessionService.ClearSession();
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
            Navigation.NavigateTo("/login", forceLoad: true);
        }
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
        SessionService.OnUserChanged -= OnUserChanged;
    }
}